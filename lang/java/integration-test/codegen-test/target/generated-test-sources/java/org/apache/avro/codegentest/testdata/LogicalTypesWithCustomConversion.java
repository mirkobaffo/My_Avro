/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.codegentest.testdata;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Test unions with logical types in generated Java classes */
@org.apache.avro.specific.AvroGenerated
public class LogicalTypesWithCustomConversion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4747523416189543339L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogicalTypesWithCustomConversion\",\"namespace\":\"org.apache.avro.codegentest.testdata\",\"doc\":\"Test unions with logical types in generated Java classes\",\"fields\":[{\"name\":\"nullableCustomField\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":9,\"scale\":2}],\"default\":null},{\"name\":\"nonNullCustomField\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":9,\"scale\":2}},{\"name\":\"nullableFixedSizeString\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"fixed-size-string\",\"minLength\":1,\"maxLength\":50}],\"default\":null},{\"name\":\"nonNullFixedSizeString\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"fixed-size-string\",\"minLength\":1,\"maxLength\":50}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.codegentest.CustomDecimalConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.codegentest.FixedSizeStringConversion());
  }

  private static final BinaryMessageEncoder<LogicalTypesWithCustomConversion> ENCODER =
      new BinaryMessageEncoder<LogicalTypesWithCustomConversion>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogicalTypesWithCustomConversion> DECODER =
      new BinaryMessageDecoder<LogicalTypesWithCustomConversion>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LogicalTypesWithCustomConversion> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LogicalTypesWithCustomConversion> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LogicalTypesWithCustomConversion> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogicalTypesWithCustomConversion>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LogicalTypesWithCustomConversion to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LogicalTypesWithCustomConversion from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LogicalTypesWithCustomConversion instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LogicalTypesWithCustomConversion fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.apache.avro.codegentest.CustomDecimal nullableCustomField;
  private org.apache.avro.codegentest.CustomDecimal nonNullCustomField;
  private org.apache.avro.codegentest.FixedSizeString nullableFixedSizeString;
  private org.apache.avro.codegentest.FixedSizeString nonNullFixedSizeString;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogicalTypesWithCustomConversion() {}

  /**
   * All-args constructor.
   * @param nullableCustomField The new value for nullableCustomField
   * @param nonNullCustomField The new value for nonNullCustomField
   * @param nullableFixedSizeString The new value for nullableFixedSizeString
   * @param nonNullFixedSizeString The new value for nonNullFixedSizeString
   */
  public LogicalTypesWithCustomConversion(org.apache.avro.codegentest.CustomDecimal nullableCustomField, org.apache.avro.codegentest.CustomDecimal nonNullCustomField, org.apache.avro.codegentest.FixedSizeString nullableFixedSizeString, org.apache.avro.codegentest.FixedSizeString nonNullFixedSizeString) {
    this.nullableCustomField = nullableCustomField;
    this.nonNullCustomField = nonNullCustomField;
    this.nullableFixedSizeString = nullableFixedSizeString;
    this.nonNullFixedSizeString = nonNullFixedSizeString;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nullableCustomField;
    case 1: return nonNullCustomField;
    case 2: return nullableFixedSizeString;
    case 3: return nonNullFixedSizeString;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.codegentest.CustomDecimalConversion(),
      null,
      new org.apache.avro.codegentest.FixedSizeStringConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nullableCustomField = (org.apache.avro.codegentest.CustomDecimal)value$; break;
    case 1: nonNullCustomField = (org.apache.avro.codegentest.CustomDecimal)value$; break;
    case 2: nullableFixedSizeString = (org.apache.avro.codegentest.FixedSizeString)value$; break;
    case 3: nonNullFixedSizeString = (org.apache.avro.codegentest.FixedSizeString)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'nullableCustomField' field.
   * @return The value of the 'nullableCustomField' field.
   */
  public org.apache.avro.codegentest.CustomDecimal getNullableCustomField() {
    return nullableCustomField;
  }


  /**
   * Sets the value of the 'nullableCustomField' field.
   * @param value the value to set.
   */
  public void setNullableCustomField(org.apache.avro.codegentest.CustomDecimal value) {
    this.nullableCustomField = value;
  }

  /**
   * Gets the value of the 'nonNullCustomField' field.
   * @return The value of the 'nonNullCustomField' field.
   */
  public org.apache.avro.codegentest.CustomDecimal getNonNullCustomField() {
    return nonNullCustomField;
  }


  /**
   * Sets the value of the 'nonNullCustomField' field.
   * @param value the value to set.
   */
  public void setNonNullCustomField(org.apache.avro.codegentest.CustomDecimal value) {
    this.nonNullCustomField = value;
  }

  /**
   * Gets the value of the 'nullableFixedSizeString' field.
   * @return The value of the 'nullableFixedSizeString' field.
   */
  public org.apache.avro.codegentest.FixedSizeString getNullableFixedSizeString() {
    return nullableFixedSizeString;
  }


  /**
   * Sets the value of the 'nullableFixedSizeString' field.
   * @param value the value to set.
   */
  public void setNullableFixedSizeString(org.apache.avro.codegentest.FixedSizeString value) {
    this.nullableFixedSizeString = value;
  }

  /**
   * Gets the value of the 'nonNullFixedSizeString' field.
   * @return The value of the 'nonNullFixedSizeString' field.
   */
  public org.apache.avro.codegentest.FixedSizeString getNonNullFixedSizeString() {
    return nonNullFixedSizeString;
  }


  /**
   * Sets the value of the 'nonNullFixedSizeString' field.
   * @param value the value to set.
   */
  public void setNonNullFixedSizeString(org.apache.avro.codegentest.FixedSizeString value) {
    this.nonNullFixedSizeString = value;
  }

  /**
   * Creates a new LogicalTypesWithCustomConversion RecordBuilder.
   * @return A new LogicalTypesWithCustomConversion RecordBuilder
   */
  public static org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder newBuilder() {
    return new org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder();
  }

  /**
   * Creates a new LogicalTypesWithCustomConversion RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogicalTypesWithCustomConversion RecordBuilder
   */
  public static org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder newBuilder(org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder other) {
    if (other == null) {
      return new org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder();
    } else {
      return new org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder(other);
    }
  }

  /**
   * Creates a new LogicalTypesWithCustomConversion RecordBuilder by copying an existing LogicalTypesWithCustomConversion instance.
   * @param other The existing instance to copy.
   * @return A new LogicalTypesWithCustomConversion RecordBuilder
   */
  public static org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder newBuilder(org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion other) {
    if (other == null) {
      return new org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder();
    } else {
      return new org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder(other);
    }
  }

  /**
   * RecordBuilder for LogicalTypesWithCustomConversion instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogicalTypesWithCustomConversion>
    implements org.apache.avro.data.RecordBuilder<LogicalTypesWithCustomConversion> {

    private org.apache.avro.codegentest.CustomDecimal nullableCustomField;
    private org.apache.avro.codegentest.CustomDecimal nonNullCustomField;
    private org.apache.avro.codegentest.FixedSizeString nullableFixedSizeString;
    private org.apache.avro.codegentest.FixedSizeString nonNullFixedSizeString;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nullableCustomField)) {
        this.nullableCustomField = data().deepCopy(fields()[0].schema(), other.nullableCustomField);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nonNullCustomField)) {
        this.nonNullCustomField = data().deepCopy(fields()[1].schema(), other.nonNullCustomField);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.nullableFixedSizeString)) {
        this.nullableFixedSizeString = data().deepCopy(fields()[2].schema(), other.nullableFixedSizeString);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.nonNullFixedSizeString)) {
        this.nonNullFixedSizeString = data().deepCopy(fields()[3].schema(), other.nonNullFixedSizeString);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing LogicalTypesWithCustomConversion instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.nullableCustomField)) {
        this.nullableCustomField = data().deepCopy(fields()[0].schema(), other.nullableCustomField);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nonNullCustomField)) {
        this.nonNullCustomField = data().deepCopy(fields()[1].schema(), other.nonNullCustomField);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nullableFixedSizeString)) {
        this.nullableFixedSizeString = data().deepCopy(fields()[2].schema(), other.nullableFixedSizeString);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nonNullFixedSizeString)) {
        this.nonNullFixedSizeString = data().deepCopy(fields()[3].schema(), other.nonNullFixedSizeString);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'nullableCustomField' field.
      * @return The value.
      */
    public org.apache.avro.codegentest.CustomDecimal getNullableCustomField() {
      return nullableCustomField;
    }


    /**
      * Sets the value of the 'nullableCustomField' field.
      * @param value The value of 'nullableCustomField'.
      * @return This builder.
      */
    public org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder setNullableCustomField(org.apache.avro.codegentest.CustomDecimal value) {
      validate(fields()[0], value);
      this.nullableCustomField = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableCustomField' field has been set.
      * @return True if the 'nullableCustomField' field has been set, false otherwise.
      */
    public boolean hasNullableCustomField() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'nullableCustomField' field.
      * @return This builder.
      */
    public org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder clearNullableCustomField() {
      nullableCustomField = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonNullCustomField' field.
      * @return The value.
      */
    public org.apache.avro.codegentest.CustomDecimal getNonNullCustomField() {
      return nonNullCustomField;
    }


    /**
      * Sets the value of the 'nonNullCustomField' field.
      * @param value The value of 'nonNullCustomField'.
      * @return This builder.
      */
    public org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder setNonNullCustomField(org.apache.avro.codegentest.CustomDecimal value) {
      validate(fields()[1], value);
      this.nonNullCustomField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nonNullCustomField' field has been set.
      * @return True if the 'nonNullCustomField' field has been set, false otherwise.
      */
    public boolean hasNonNullCustomField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nonNullCustomField' field.
      * @return This builder.
      */
    public org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder clearNonNullCustomField() {
      nonNullCustomField = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableFixedSizeString' field.
      * @return The value.
      */
    public org.apache.avro.codegentest.FixedSizeString getNullableFixedSizeString() {
      return nullableFixedSizeString;
    }


    /**
      * Sets the value of the 'nullableFixedSizeString' field.
      * @param value The value of 'nullableFixedSizeString'.
      * @return This builder.
      */
    public org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder setNullableFixedSizeString(org.apache.avro.codegentest.FixedSizeString value) {
      validate(fields()[2], value);
      this.nullableFixedSizeString = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableFixedSizeString' field has been set.
      * @return True if the 'nullableFixedSizeString' field has been set, false otherwise.
      */
    public boolean hasNullableFixedSizeString() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'nullableFixedSizeString' field.
      * @return This builder.
      */
    public org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder clearNullableFixedSizeString() {
      nullableFixedSizeString = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonNullFixedSizeString' field.
      * @return The value.
      */
    public org.apache.avro.codegentest.FixedSizeString getNonNullFixedSizeString() {
      return nonNullFixedSizeString;
    }


    /**
      * Sets the value of the 'nonNullFixedSizeString' field.
      * @param value The value of 'nonNullFixedSizeString'.
      * @return This builder.
      */
    public org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder setNonNullFixedSizeString(org.apache.avro.codegentest.FixedSizeString value) {
      validate(fields()[3], value);
      this.nonNullFixedSizeString = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'nonNullFixedSizeString' field has been set.
      * @return True if the 'nonNullFixedSizeString' field has been set, false otherwise.
      */
    public boolean hasNonNullFixedSizeString() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'nonNullFixedSizeString' field.
      * @return This builder.
      */
    public org.apache.avro.codegentest.testdata.LogicalTypesWithCustomConversion.Builder clearNonNullFixedSizeString() {
      nonNullFixedSizeString = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogicalTypesWithCustomConversion build() {
      try {
        LogicalTypesWithCustomConversion record = new LogicalTypesWithCustomConversion();
        record.nullableCustomField = fieldSetFlags()[0] ? this.nullableCustomField : (org.apache.avro.codegentest.CustomDecimal) defaultValue(fields()[0]);
        record.nonNullCustomField = fieldSetFlags()[1] ? this.nonNullCustomField : (org.apache.avro.codegentest.CustomDecimal) defaultValue(fields()[1]);
        record.nullableFixedSizeString = fieldSetFlags()[2] ? this.nullableFixedSizeString : (org.apache.avro.codegentest.FixedSizeString) defaultValue(fields()[2]);
        record.nonNullFixedSizeString = fieldSetFlags()[3] ? this.nonNullFixedSizeString : (org.apache.avro.codegentest.FixedSizeString) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogicalTypesWithCustomConversion>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogicalTypesWithCustomConversion>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogicalTypesWithCustomConversion>
    READER$ = (org.apache.avro.io.DatumReader<LogicalTypesWithCustomConversion>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










