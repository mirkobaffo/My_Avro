/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class Interop extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6578175043412808472L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Interop\",\"namespace\":\"org.apache.avro\",\"fields\":[{\"name\":\"intField\",\"type\":\"int\"},{\"name\":\"longField\",\"type\":\"long\"},{\"name\":\"stringField\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"boolField\",\"type\":\"boolean\"},{\"name\":\"floatField\",\"type\":\"float\"},{\"name\":\"doubleField\",\"type\":\"double\"},{\"name\":\"bytesField\",\"type\":\"bytes\"},{\"name\":\"nullField\",\"type\":\"null\"},{\"name\":\"arrayField\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"mapField\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Foo\",\"fields\":[{\"name\":\"label\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},\"avro.java.string\":\"String\"}},{\"name\":\"unionField\",\"type\":[\"boolean\",\"double\",{\"type\":\"array\",\"items\":\"bytes\"}]},{\"name\":\"enumField\",\"type\":{\"type\":\"enum\",\"name\":\"Kind\",\"symbols\":[\"A\",\"B\",\"C\"]}},{\"name\":\"fixedField\",\"type\":{\"type\":\"fixed\",\"name\":\"MD5\",\"size\":16}},{\"name\":\"recordField\",\"type\":{\"type\":\"record\",\"name\":\"Node\",\"fields\":[{\"name\":\"label\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"children\",\"type\":{\"type\":\"array\",\"items\":\"Node\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Interop> ENCODER =
      new BinaryMessageEncoder<Interop>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Interop> DECODER =
      new BinaryMessageDecoder<Interop>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Interop> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Interop> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Interop> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Interop>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Interop to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Interop from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Interop instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Interop fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int intField;
  private long longField;
  private java.lang.String stringField;
  private boolean boolField;
  private float floatField;
  private double doubleField;
  private java.nio.ByteBuffer bytesField;
  private java.lang.Void nullField;
  private java.util.List<java.lang.Double> arrayField;
  private java.util.Map<java.lang.String,org.apache.avro.Foo> mapField;
  private java.lang.Object unionField;
  private org.apache.avro.Kind enumField;
  private org.apache.avro.MD5 fixedField;
  private org.apache.avro.Node recordField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Interop() {}

  /**
   * All-args constructor.
   * @param intField The new value for intField
   * @param longField The new value for longField
   * @param stringField The new value for stringField
   * @param boolField The new value for boolField
   * @param floatField The new value for floatField
   * @param doubleField The new value for doubleField
   * @param bytesField The new value for bytesField
   * @param nullField The new value for nullField
   * @param arrayField The new value for arrayField
   * @param mapField The new value for mapField
   * @param unionField The new value for unionField
   * @param enumField The new value for enumField
   * @param fixedField The new value for fixedField
   * @param recordField The new value for recordField
   */
  public Interop(java.lang.Integer intField, java.lang.Long longField, java.lang.String stringField, java.lang.Boolean boolField, java.lang.Float floatField, java.lang.Double doubleField, java.nio.ByteBuffer bytesField, java.lang.Void nullField, java.util.List<java.lang.Double> arrayField, java.util.Map<java.lang.String,org.apache.avro.Foo> mapField, java.lang.Object unionField, org.apache.avro.Kind enumField, org.apache.avro.MD5 fixedField, org.apache.avro.Node recordField) {
    this.intField = intField;
    this.longField = longField;
    this.stringField = stringField;
    this.boolField = boolField;
    this.floatField = floatField;
    this.doubleField = doubleField;
    this.bytesField = bytesField;
    this.nullField = nullField;
    this.arrayField = arrayField;
    this.mapField = mapField;
    this.unionField = unionField;
    this.enumField = enumField;
    this.fixedField = fixedField;
    this.recordField = recordField;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return intField;
    case 1: return longField;
    case 2: return stringField;
    case 3: return boolField;
    case 4: return floatField;
    case 5: return doubleField;
    case 6: return bytesField;
    case 7: return nullField;
    case 8: return arrayField;
    case 9: return mapField;
    case 10: return unionField;
    case 11: return enumField;
    case 12: return fixedField;
    case 13: return recordField;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: intField = (java.lang.Integer)value$; break;
    case 1: longField = (java.lang.Long)value$; break;
    case 2: stringField = value$ != null ? value$.toString() : null; break;
    case 3: boolField = (java.lang.Boolean)value$; break;
    case 4: floatField = (java.lang.Float)value$; break;
    case 5: doubleField = (java.lang.Double)value$; break;
    case 6: bytesField = (java.nio.ByteBuffer)value$; break;
    case 7: nullField = (java.lang.Void)value$; break;
    case 8: arrayField = (java.util.List<java.lang.Double>)value$; break;
    case 9: mapField = (java.util.Map<java.lang.String,org.apache.avro.Foo>)value$; break;
    case 10: unionField = value$; break;
    case 11: enumField = (org.apache.avro.Kind)value$; break;
    case 12: fixedField = (org.apache.avro.MD5)value$; break;
    case 13: recordField = (org.apache.avro.Node)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'intField' field.
   * @return The value of the 'intField' field.
   */
  public int getIntField() {
    return intField;
  }

  /**
   * Gets the value of the 'intField' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalIntField() {
    return Optional.<java.lang.Integer>ofNullable(intField);
  }

  /**
   * Sets the value of the 'intField' field.
   * @param value the value to set.
   */
  public void setIntField(int value) {
    this.intField = value;
  }

  /**
   * Gets the value of the 'longField' field.
   * @return The value of the 'longField' field.
   */
  public long getLongField() {
    return longField;
  }

  /**
   * Gets the value of the 'longField' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalLongField() {
    return Optional.<java.lang.Long>ofNullable(longField);
  }

  /**
   * Sets the value of the 'longField' field.
   * @param value the value to set.
   */
  public void setLongField(long value) {
    this.longField = value;
  }

  /**
   * Gets the value of the 'stringField' field.
   * @return The value of the 'stringField' field.
   */
  public java.lang.String getStringField() {
    return stringField;
  }

  /**
   * Gets the value of the 'stringField' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalStringField() {
    return Optional.<java.lang.String>ofNullable(stringField);
  }

  /**
   * Sets the value of the 'stringField' field.
   * @param value the value to set.
   */
  public void setStringField(java.lang.String value) {
    this.stringField = value;
  }

  /**
   * Gets the value of the 'boolField' field.
   * @return The value of the 'boolField' field.
   */
  public boolean getBoolField() {
    return boolField;
  }

  /**
   * Gets the value of the 'boolField' field as an Optional&lt;java.lang.Boolean&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Boolean&gt;.
   */
  public Optional<java.lang.Boolean> getOptionalBoolField() {
    return Optional.<java.lang.Boolean>ofNullable(boolField);
  }

  /**
   * Sets the value of the 'boolField' field.
   * @param value the value to set.
   */
  public void setBoolField(boolean value) {
    this.boolField = value;
  }

  /**
   * Gets the value of the 'floatField' field.
   * @return The value of the 'floatField' field.
   */
  public float getFloatField() {
    return floatField;
  }

  /**
   * Gets the value of the 'floatField' field as an Optional&lt;java.lang.Float&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Float&gt;.
   */
  public Optional<java.lang.Float> getOptionalFloatField() {
    return Optional.<java.lang.Float>ofNullable(floatField);
  }

  /**
   * Sets the value of the 'floatField' field.
   * @param value the value to set.
   */
  public void setFloatField(float value) {
    this.floatField = value;
  }

  /**
   * Gets the value of the 'doubleField' field.
   * @return The value of the 'doubleField' field.
   */
  public double getDoubleField() {
    return doubleField;
  }

  /**
   * Gets the value of the 'doubleField' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalDoubleField() {
    return Optional.<java.lang.Double>ofNullable(doubleField);
  }

  /**
   * Sets the value of the 'doubleField' field.
   * @param value the value to set.
   */
  public void setDoubleField(double value) {
    this.doubleField = value;
  }

  /**
   * Gets the value of the 'bytesField' field.
   * @return The value of the 'bytesField' field.
   */
  public java.nio.ByteBuffer getBytesField() {
    return bytesField;
  }

  /**
   * Gets the value of the 'bytesField' field as an Optional&lt;java.nio.ByteBuffer&gt;.
   * @return The value wrapped in an Optional&lt;java.nio.ByteBuffer&gt;.
   */
  public Optional<java.nio.ByteBuffer> getOptionalBytesField() {
    return Optional.<java.nio.ByteBuffer>ofNullable(bytesField);
  }

  /**
   * Sets the value of the 'bytesField' field.
   * @param value the value to set.
   */
  public void setBytesField(java.nio.ByteBuffer value) {
    this.bytesField = value;
  }

  /**
   * Gets the value of the 'nullField' field.
   * @return The value of the 'nullField' field.
   */
  public java.lang.Void getNullField() {
    return nullField;
  }

  /**
   * Gets the value of the 'nullField' field as an Optional&lt;java.lang.Void&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Void&gt;.
   */
  public Optional<java.lang.Void> getOptionalNullField() {
    return Optional.<java.lang.Void>ofNullable(nullField);
  }

  /**
   * Sets the value of the 'nullField' field.
   * @param value the value to set.
   */
  public void setNullField(java.lang.Void value) {
    this.nullField = value;
  }

  /**
   * Gets the value of the 'arrayField' field.
   * @return The value of the 'arrayField' field.
   */
  public java.util.List<java.lang.Double> getArrayField() {
    return arrayField;
  }

  /**
   * Gets the value of the 'arrayField' field as an Optional&lt;java.util.List<java.lang.Double>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.List<java.lang.Double>&gt;.
   */
  public Optional<java.util.List<java.lang.Double>> getOptionalArrayField() {
    return Optional.<java.util.List<java.lang.Double>>ofNullable(arrayField);
  }

  /**
   * Sets the value of the 'arrayField' field.
   * @param value the value to set.
   */
  public void setArrayField(java.util.List<java.lang.Double> value) {
    this.arrayField = value;
  }

  /**
   * Gets the value of the 'mapField' field.
   * @return The value of the 'mapField' field.
   */
  public java.util.Map<java.lang.String,org.apache.avro.Foo> getMapField() {
    return mapField;
  }

  /**
   * Gets the value of the 'mapField' field as an Optional&lt;java.util.Map<java.lang.String,org.apache.avro.Foo>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.Map<java.lang.String,org.apache.avro.Foo>&gt;.
   */
  public Optional<java.util.Map<java.lang.String,org.apache.avro.Foo>> getOptionalMapField() {
    return Optional.<java.util.Map<java.lang.String,org.apache.avro.Foo>>ofNullable(mapField);
  }

  /**
   * Sets the value of the 'mapField' field.
   * @param value the value to set.
   */
  public void setMapField(java.util.Map<java.lang.String,org.apache.avro.Foo> value) {
    this.mapField = value;
  }

  /**
   * Gets the value of the 'unionField' field.
   * @return The value of the 'unionField' field.
   */
  public java.lang.Object getUnionField() {
    return unionField;
  }

  /**
   * Gets the value of the 'unionField' field as an Optional&lt;java.lang.Object&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Object&gt;.
   */
  public Optional<java.lang.Object> getOptionalUnionField() {
    return Optional.<java.lang.Object>ofNullable(unionField);
  }

  /**
   * Sets the value of the 'unionField' field.
   * @param value the value to set.
   */
  public void setUnionField(java.lang.Object value) {
    this.unionField = value;
  }

  /**
   * Gets the value of the 'enumField' field.
   * @return The value of the 'enumField' field.
   */
  public org.apache.avro.Kind getEnumField() {
    return enumField;
  }

  /**
   * Gets the value of the 'enumField' field as an Optional&lt;org.apache.avro.Kind&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.Kind&gt;.
   */
  public Optional<org.apache.avro.Kind> getOptionalEnumField() {
    return Optional.<org.apache.avro.Kind>ofNullable(enumField);
  }

  /**
   * Sets the value of the 'enumField' field.
   * @param value the value to set.
   */
  public void setEnumField(org.apache.avro.Kind value) {
    this.enumField = value;
  }

  /**
   * Gets the value of the 'fixedField' field.
   * @return The value of the 'fixedField' field.
   */
  public org.apache.avro.MD5 getFixedField() {
    return fixedField;
  }

  /**
   * Gets the value of the 'fixedField' field as an Optional&lt;org.apache.avro.MD5&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.MD5&gt;.
   */
  public Optional<org.apache.avro.MD5> getOptionalFixedField() {
    return Optional.<org.apache.avro.MD5>ofNullable(fixedField);
  }

  /**
   * Sets the value of the 'fixedField' field.
   * @param value the value to set.
   */
  public void setFixedField(org.apache.avro.MD5 value) {
    this.fixedField = value;
  }

  /**
   * Gets the value of the 'recordField' field.
   * @return The value of the 'recordField' field.
   */
  public org.apache.avro.Node getRecordField() {
    return recordField;
  }

  /**
   * Gets the value of the 'recordField' field as an Optional&lt;org.apache.avro.Node&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.Node&gt;.
   */
  public Optional<org.apache.avro.Node> getOptionalRecordField() {
    return Optional.<org.apache.avro.Node>ofNullable(recordField);
  }

  /**
   * Sets the value of the 'recordField' field.
   * @param value the value to set.
   */
  public void setRecordField(org.apache.avro.Node value) {
    this.recordField = value;
  }

  /**
   * Creates a new Interop RecordBuilder.
   * @return A new Interop RecordBuilder
   */
  public static org.apache.avro.Interop.Builder newBuilder() {
    return new org.apache.avro.Interop.Builder();
  }

  /**
   * Creates a new Interop RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Interop RecordBuilder
   */
  public static org.apache.avro.Interop.Builder newBuilder(org.apache.avro.Interop.Builder other) {
    if (other == null) {
      return new org.apache.avro.Interop.Builder();
    } else {
      return new org.apache.avro.Interop.Builder(other);
    }
  }

  /**
   * Creates a new Interop RecordBuilder by copying an existing Interop instance.
   * @param other The existing instance to copy.
   * @return A new Interop RecordBuilder
   */
  public static org.apache.avro.Interop.Builder newBuilder(org.apache.avro.Interop other) {
    if (other == null) {
      return new org.apache.avro.Interop.Builder();
    } else {
      return new org.apache.avro.Interop.Builder(other);
    }
  }

  /**
   * RecordBuilder for Interop instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Interop>
    implements org.apache.avro.data.RecordBuilder<Interop> {

    private int intField;
    private long longField;
    private java.lang.String stringField;
    private boolean boolField;
    private float floatField;
    private double doubleField;
    private java.nio.ByteBuffer bytesField;
    private java.lang.Void nullField;
    private java.util.List<java.lang.Double> arrayField;
    private java.util.Map<java.lang.String,org.apache.avro.Foo> mapField;
    private java.lang.Object unionField;
    private org.apache.avro.Kind enumField;
    private org.apache.avro.MD5 fixedField;
    private org.apache.avro.Node recordField;
    private org.apache.avro.Node.Builder recordFieldBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.Interop.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.intField)) {
        this.intField = data().deepCopy(fields()[0].schema(), other.intField);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.longField)) {
        this.longField = data().deepCopy(fields()[1].schema(), other.longField);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.stringField)) {
        this.stringField = data().deepCopy(fields()[2].schema(), other.stringField);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.boolField)) {
        this.boolField = data().deepCopy(fields()[3].schema(), other.boolField);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.floatField)) {
        this.floatField = data().deepCopy(fields()[4].schema(), other.floatField);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.doubleField)) {
        this.doubleField = data().deepCopy(fields()[5].schema(), other.doubleField);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.bytesField)) {
        this.bytesField = data().deepCopy(fields()[6].schema(), other.bytesField);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.nullField)) {
        this.nullField = data().deepCopy(fields()[7].schema(), other.nullField);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.arrayField)) {
        this.arrayField = data().deepCopy(fields()[8].schema(), other.arrayField);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.mapField)) {
        this.mapField = data().deepCopy(fields()[9].schema(), other.mapField);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.unionField)) {
        this.unionField = data().deepCopy(fields()[10].schema(), other.unionField);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.enumField)) {
        this.enumField = data().deepCopy(fields()[11].schema(), other.enumField);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.fixedField)) {
        this.fixedField = data().deepCopy(fields()[12].schema(), other.fixedField);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.recordField)) {
        this.recordField = data().deepCopy(fields()[13].schema(), other.recordField);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (other.hasRecordFieldBuilder()) {
        this.recordFieldBuilder = org.apache.avro.Node.newBuilder(other.getRecordFieldBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Interop instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.Interop other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.intField)) {
        this.intField = data().deepCopy(fields()[0].schema(), other.intField);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longField)) {
        this.longField = data().deepCopy(fields()[1].schema(), other.longField);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stringField)) {
        this.stringField = data().deepCopy(fields()[2].schema(), other.stringField);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.boolField)) {
        this.boolField = data().deepCopy(fields()[3].schema(), other.boolField);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.floatField)) {
        this.floatField = data().deepCopy(fields()[4].schema(), other.floatField);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.doubleField)) {
        this.doubleField = data().deepCopy(fields()[5].schema(), other.doubleField);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bytesField)) {
        this.bytesField = data().deepCopy(fields()[6].schema(), other.bytesField);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.nullField)) {
        this.nullField = data().deepCopy(fields()[7].schema(), other.nullField);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.arrayField)) {
        this.arrayField = data().deepCopy(fields()[8].schema(), other.arrayField);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.mapField)) {
        this.mapField = data().deepCopy(fields()[9].schema(), other.mapField);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.unionField)) {
        this.unionField = data().deepCopy(fields()[10].schema(), other.unionField);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.enumField)) {
        this.enumField = data().deepCopy(fields()[11].schema(), other.enumField);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.fixedField)) {
        this.fixedField = data().deepCopy(fields()[12].schema(), other.fixedField);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.recordField)) {
        this.recordField = data().deepCopy(fields()[13].schema(), other.recordField);
        fieldSetFlags()[13] = true;
      }
      this.recordFieldBuilder = null;
    }

    /**
      * Gets the value of the 'intField' field.
      * @return The value.
      */
    public int getIntField() {
      return intField;
    }

    /**
      * Gets the value of the 'intField' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalIntField() {
      return Optional.<java.lang.Integer>ofNullable(intField);
    }

    /**
      * Sets the value of the 'intField' field.
      * @param value The value of 'intField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setIntField(int value) {
      validate(fields()[0], value);
      this.intField = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'intField' field has been set.
      * @return True if the 'intField' field has been set, false otherwise.
      */
    public boolean hasIntField() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'intField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearIntField() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'longField' field.
      * @return The value.
      */
    public long getLongField() {
      return longField;
    }

    /**
      * Gets the value of the 'longField' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalLongField() {
      return Optional.<java.lang.Long>ofNullable(longField);
    }

    /**
      * Sets the value of the 'longField' field.
      * @param value The value of 'longField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setLongField(long value) {
      validate(fields()[1], value);
      this.longField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'longField' field has been set.
      * @return True if the 'longField' field has been set, false otherwise.
      */
    public boolean hasLongField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'longField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearLongField() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'stringField' field.
      * @return The value.
      */
    public java.lang.String getStringField() {
      return stringField;
    }

    /**
      * Gets the value of the 'stringField' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalStringField() {
      return Optional.<java.lang.String>ofNullable(stringField);
    }

    /**
      * Sets the value of the 'stringField' field.
      * @param value The value of 'stringField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setStringField(java.lang.String value) {
      validate(fields()[2], value);
      this.stringField = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'stringField' field has been set.
      * @return True if the 'stringField' field has been set, false otherwise.
      */
    public boolean hasStringField() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'stringField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearStringField() {
      stringField = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'boolField' field.
      * @return The value.
      */
    public boolean getBoolField() {
      return boolField;
    }

    /**
      * Gets the value of the 'boolField' field as an Optional&lt;java.lang.Boolean&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Boolean&gt;.
      */
    public Optional<java.lang.Boolean> getOptionalBoolField() {
      return Optional.<java.lang.Boolean>ofNullable(boolField);
    }

    /**
      * Sets the value of the 'boolField' field.
      * @param value The value of 'boolField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setBoolField(boolean value) {
      validate(fields()[3], value);
      this.boolField = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'boolField' field has been set.
      * @return True if the 'boolField' field has been set, false otherwise.
      */
    public boolean hasBoolField() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'boolField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearBoolField() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'floatField' field.
      * @return The value.
      */
    public float getFloatField() {
      return floatField;
    }

    /**
      * Gets the value of the 'floatField' field as an Optional&lt;java.lang.Float&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Float&gt;.
      */
    public Optional<java.lang.Float> getOptionalFloatField() {
      return Optional.<java.lang.Float>ofNullable(floatField);
    }

    /**
      * Sets the value of the 'floatField' field.
      * @param value The value of 'floatField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setFloatField(float value) {
      validate(fields()[4], value);
      this.floatField = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'floatField' field has been set.
      * @return True if the 'floatField' field has been set, false otherwise.
      */
    public boolean hasFloatField() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'floatField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearFloatField() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'doubleField' field.
      * @return The value.
      */
    public double getDoubleField() {
      return doubleField;
    }

    /**
      * Gets the value of the 'doubleField' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalDoubleField() {
      return Optional.<java.lang.Double>ofNullable(doubleField);
    }

    /**
      * Sets the value of the 'doubleField' field.
      * @param value The value of 'doubleField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setDoubleField(double value) {
      validate(fields()[5], value);
      this.doubleField = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'doubleField' field has been set.
      * @return True if the 'doubleField' field has been set, false otherwise.
      */
    public boolean hasDoubleField() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'doubleField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearDoubleField() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesField' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBytesField() {
      return bytesField;
    }

    /**
      * Gets the value of the 'bytesField' field as an Optional&lt;java.nio.ByteBuffer&gt;.
      * @return The value wrapped in an Optional&lt;java.nio.ByteBuffer&gt;.
      */
    public Optional<java.nio.ByteBuffer> getOptionalBytesField() {
      return Optional.<java.nio.ByteBuffer>ofNullable(bytesField);
    }

    /**
      * Sets the value of the 'bytesField' field.
      * @param value The value of 'bytesField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setBytesField(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.bytesField = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesField' field has been set.
      * @return True if the 'bytesField' field has been set, false otherwise.
      */
    public boolean hasBytesField() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'bytesField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearBytesField() {
      bytesField = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullField' field.
      * @return The value.
      */
    public java.lang.Void getNullField() {
      return nullField;
    }

    /**
      * Gets the value of the 'nullField' field as an Optional&lt;java.lang.Void&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Void&gt;.
      */
    public Optional<java.lang.Void> getOptionalNullField() {
      return Optional.<java.lang.Void>ofNullable(nullField);
    }

    /**
      * Sets the value of the 'nullField' field.
      * @param value The value of 'nullField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setNullField(java.lang.Void value) {
      validate(fields()[7], value);
      this.nullField = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'nullField' field has been set.
      * @return True if the 'nullField' field has been set, false otherwise.
      */
    public boolean hasNullField() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'nullField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearNullField() {
      nullField = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrayField' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getArrayField() {
      return arrayField;
    }

    /**
      * Gets the value of the 'arrayField' field as an Optional&lt;java.util.List<java.lang.Double>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.List<java.lang.Double>&gt;.
      */
    public Optional<java.util.List<java.lang.Double>> getOptionalArrayField() {
      return Optional.<java.util.List<java.lang.Double>>ofNullable(arrayField);
    }

    /**
      * Sets the value of the 'arrayField' field.
      * @param value The value of 'arrayField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setArrayField(java.util.List<java.lang.Double> value) {
      validate(fields()[8], value);
      this.arrayField = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'arrayField' field has been set.
      * @return True if the 'arrayField' field has been set, false otherwise.
      */
    public boolean hasArrayField() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'arrayField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearArrayField() {
      arrayField = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapField' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,org.apache.avro.Foo> getMapField() {
      return mapField;
    }

    /**
      * Gets the value of the 'mapField' field as an Optional&lt;java.util.Map<java.lang.String,org.apache.avro.Foo>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.Map<java.lang.String,org.apache.avro.Foo>&gt;.
      */
    public Optional<java.util.Map<java.lang.String,org.apache.avro.Foo>> getOptionalMapField() {
      return Optional.<java.util.Map<java.lang.String,org.apache.avro.Foo>>ofNullable(mapField);
    }

    /**
      * Sets the value of the 'mapField' field.
      * @param value The value of 'mapField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setMapField(java.util.Map<java.lang.String,org.apache.avro.Foo> value) {
      validate(fields()[9], value);
      this.mapField = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'mapField' field has been set.
      * @return True if the 'mapField' field has been set, false otherwise.
      */
    public boolean hasMapField() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'mapField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearMapField() {
      mapField = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'unionField' field.
      * @return The value.
      */
    public java.lang.Object getUnionField() {
      return unionField;
    }

    /**
      * Gets the value of the 'unionField' field as an Optional&lt;java.lang.Object&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Object&gt;.
      */
    public Optional<java.lang.Object> getOptionalUnionField() {
      return Optional.<java.lang.Object>ofNullable(unionField);
    }

    /**
      * Sets the value of the 'unionField' field.
      * @param value The value of 'unionField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setUnionField(java.lang.Object value) {
      validate(fields()[10], value);
      this.unionField = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'unionField' field has been set.
      * @return True if the 'unionField' field has been set, false otherwise.
      */
    public boolean hasUnionField() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'unionField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearUnionField() {
      unionField = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'enumField' field.
      * @return The value.
      */
    public org.apache.avro.Kind getEnumField() {
      return enumField;
    }

    /**
      * Gets the value of the 'enumField' field as an Optional&lt;org.apache.avro.Kind&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.Kind&gt;.
      */
    public Optional<org.apache.avro.Kind> getOptionalEnumField() {
      return Optional.<org.apache.avro.Kind>ofNullable(enumField);
    }

    /**
      * Sets the value of the 'enumField' field.
      * @param value The value of 'enumField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setEnumField(org.apache.avro.Kind value) {
      validate(fields()[11], value);
      this.enumField = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'enumField' field has been set.
      * @return True if the 'enumField' field has been set, false otherwise.
      */
    public boolean hasEnumField() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'enumField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearEnumField() {
      enumField = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'fixedField' field.
      * @return The value.
      */
    public org.apache.avro.MD5 getFixedField() {
      return fixedField;
    }

    /**
      * Gets the value of the 'fixedField' field as an Optional&lt;org.apache.avro.MD5&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.MD5&gt;.
      */
    public Optional<org.apache.avro.MD5> getOptionalFixedField() {
      return Optional.<org.apache.avro.MD5>ofNullable(fixedField);
    }

    /**
      * Sets the value of the 'fixedField' field.
      * @param value The value of 'fixedField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setFixedField(org.apache.avro.MD5 value) {
      validate(fields()[12], value);
      this.fixedField = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'fixedField' field has been set.
      * @return True if the 'fixedField' field has been set, false otherwise.
      */
    public boolean hasFixedField() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'fixedField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearFixedField() {
      fixedField = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordField' field.
      * @return The value.
      */
    public org.apache.avro.Node getRecordField() {
      return recordField;
    }

    /**
      * Gets the value of the 'recordField' field as an Optional&lt;org.apache.avro.Node&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.Node&gt;.
      */
    public Optional<org.apache.avro.Node> getOptionalRecordField() {
      return Optional.<org.apache.avro.Node>ofNullable(recordField);
    }

    /**
      * Sets the value of the 'recordField' field.
      * @param value The value of 'recordField'.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder setRecordField(org.apache.avro.Node value) {
      validate(fields()[13], value);
      this.recordFieldBuilder = null;
      this.recordField = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'recordField' field has been set.
      * @return True if the 'recordField' field has been set, false otherwise.
      */
    public boolean hasRecordField() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'recordField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.avro.Node.Builder getRecordFieldBuilder() {
      if (recordFieldBuilder == null) {
        if (hasRecordField()) {
          setRecordFieldBuilder(org.apache.avro.Node.newBuilder(recordField));
        } else {
          setRecordFieldBuilder(org.apache.avro.Node.newBuilder());
        }
      }
      return recordFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'recordField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.avro.Interop.Builder setRecordFieldBuilder(org.apache.avro.Node.Builder value) {
      clearRecordField();
      recordFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'recordField' field has an active Builder instance
     * @return True if the 'recordField' field has an active Builder instance
     */
    public boolean hasRecordFieldBuilder() {
      return recordFieldBuilder != null;
    }

    /**
      * Clears the value of the 'recordField' field.
      * @return This builder.
      */
    public org.apache.avro.Interop.Builder clearRecordField() {
      recordField = null;
      recordFieldBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Interop build() {
      try {
        Interop record = new Interop();
        record.intField = fieldSetFlags()[0] ? this.intField : (java.lang.Integer) defaultValue(fields()[0]);
        record.longField = fieldSetFlags()[1] ? this.longField : (java.lang.Long) defaultValue(fields()[1]);
        record.stringField = fieldSetFlags()[2] ? this.stringField : (java.lang.String) defaultValue(fields()[2]);
        record.boolField = fieldSetFlags()[3] ? this.boolField : (java.lang.Boolean) defaultValue(fields()[3]);
        record.floatField = fieldSetFlags()[4] ? this.floatField : (java.lang.Float) defaultValue(fields()[4]);
        record.doubleField = fieldSetFlags()[5] ? this.doubleField : (java.lang.Double) defaultValue(fields()[5]);
        record.bytesField = fieldSetFlags()[6] ? this.bytesField : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.nullField = fieldSetFlags()[7] ? this.nullField : (java.lang.Void) defaultValue(fields()[7]);
        record.arrayField = fieldSetFlags()[8] ? this.arrayField : (java.util.List<java.lang.Double>) defaultValue(fields()[8]);
        record.mapField = fieldSetFlags()[9] ? this.mapField : (java.util.Map<java.lang.String,org.apache.avro.Foo>) defaultValue(fields()[9]);
        record.unionField = fieldSetFlags()[10] ? this.unionField :  defaultValue(fields()[10]);
        record.enumField = fieldSetFlags()[11] ? this.enumField : (org.apache.avro.Kind) defaultValue(fields()[11]);
        record.fixedField = fieldSetFlags()[12] ? this.fixedField : (org.apache.avro.MD5) defaultValue(fields()[12]);
        if (recordFieldBuilder != null) {
          try {
            record.recordField = this.recordFieldBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("recordField"));
            throw e;
          }
        } else {
          record.recordField = fieldSetFlags()[13] ? this.recordField : (org.apache.avro.Node) defaultValue(fields()[13]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Interop>
    WRITER$ = (org.apache.avro.io.DatumWriter<Interop>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Interop>
    READER$ = (org.apache.avro.io.DatumReader<Interop>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










