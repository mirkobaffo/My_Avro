/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.test;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class TestRecordWithUnion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8335472223614349899L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestRecordWithUnion\",\"namespace\":\"org.apache.avro.test\",\"fields\":[{\"name\":\"kind\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"Kind\",\"symbols\":[\"FOO\",\"BAR\",\"BAZ\"],\"javaAnnotation\":\"org.apache.avro.TestAnnotation\"}]},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestRecordWithUnion> ENCODER =
      new BinaryMessageEncoder<TestRecordWithUnion>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestRecordWithUnion> DECODER =
      new BinaryMessageDecoder<TestRecordWithUnion>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TestRecordWithUnion> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TestRecordWithUnion> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TestRecordWithUnion> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestRecordWithUnion>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TestRecordWithUnion to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TestRecordWithUnion from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TestRecordWithUnion instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TestRecordWithUnion fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.apache.avro.test.Kind kind;
  private java.lang.String value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestRecordWithUnion() {}

  /**
   * All-args constructor.
   * @param kind The new value for kind
   * @param value The new value for value
   */
  public TestRecordWithUnion(org.apache.avro.test.Kind kind, java.lang.String value) {
    this.kind = kind;
    this.value = value;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return kind;
    case 1: return value;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: kind = (org.apache.avro.test.Kind)value$; break;
    case 1: value = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'kind' field.
   * @return The value of the 'kind' field.
   */
  public org.apache.avro.test.Kind getKind() {
    return kind;
  }

  /**
   * Gets the value of the 'kind' field as an Optional&lt;org.apache.avro.test.Kind&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.test.Kind&gt;.
   */
  public Optional<org.apache.avro.test.Kind> getOptionalKind() {
    return Optional.<org.apache.avro.test.Kind>ofNullable(kind);
  }

  /**
   * Sets the value of the 'kind' field.
   * @param value the value to set.
   */
  public void setKind(org.apache.avro.test.Kind value) {
    this.kind = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Gets the value of the 'value' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalValue() {
    return Optional.<java.lang.String>ofNullable(value);
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Creates a new TestRecordWithUnion RecordBuilder.
   * @return A new TestRecordWithUnion RecordBuilder
   */
  public static org.apache.avro.test.TestRecordWithUnion.Builder newBuilder() {
    return new org.apache.avro.test.TestRecordWithUnion.Builder();
  }

  /**
   * Creates a new TestRecordWithUnion RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestRecordWithUnion RecordBuilder
   */
  public static org.apache.avro.test.TestRecordWithUnion.Builder newBuilder(org.apache.avro.test.TestRecordWithUnion.Builder other) {
    if (other == null) {
      return new org.apache.avro.test.TestRecordWithUnion.Builder();
    } else {
      return new org.apache.avro.test.TestRecordWithUnion.Builder(other);
    }
  }

  /**
   * Creates a new TestRecordWithUnion RecordBuilder by copying an existing TestRecordWithUnion instance.
   * @param other The existing instance to copy.
   * @return A new TestRecordWithUnion RecordBuilder
   */
  public static org.apache.avro.test.TestRecordWithUnion.Builder newBuilder(org.apache.avro.test.TestRecordWithUnion other) {
    if (other == null) {
      return new org.apache.avro.test.TestRecordWithUnion.Builder();
    } else {
      return new org.apache.avro.test.TestRecordWithUnion.Builder(other);
    }
  }

  /**
   * RecordBuilder for TestRecordWithUnion instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestRecordWithUnion>
    implements org.apache.avro.data.RecordBuilder<TestRecordWithUnion> {

    private org.apache.avro.test.Kind kind;
    private java.lang.String value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.test.TestRecordWithUnion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.kind)) {
        this.kind = data().deepCopy(fields()[0].schema(), other.kind);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing TestRecordWithUnion instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.test.TestRecordWithUnion other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.kind)) {
        this.kind = data().deepCopy(fields()[0].schema(), other.kind);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'kind' field.
      * @return The value.
      */
    public org.apache.avro.test.Kind getKind() {
      return kind;
    }

    /**
      * Gets the value of the 'kind' field as an Optional&lt;org.apache.avro.test.Kind&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.test.Kind&gt;.
      */
    public Optional<org.apache.avro.test.Kind> getOptionalKind() {
      return Optional.<org.apache.avro.test.Kind>ofNullable(kind);
    }

    /**
      * Sets the value of the 'kind' field.
      * @param value The value of 'kind'.
      * @return This builder.
      */
    public org.apache.avro.test.TestRecordWithUnion.Builder setKind(org.apache.avro.test.Kind value) {
      validate(fields()[0], value);
      this.kind = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'kind' field has been set.
      * @return True if the 'kind' field has been set, false otherwise.
      */
    public boolean hasKind() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'kind' field.
      * @return This builder.
      */
    public org.apache.avro.test.TestRecordWithUnion.Builder clearKind() {
      kind = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Gets the value of the 'value' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalValue() {
      return Optional.<java.lang.String>ofNullable(value);
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.apache.avro.test.TestRecordWithUnion.Builder setValue(java.lang.String value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public org.apache.avro.test.TestRecordWithUnion.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestRecordWithUnion build() {
      try {
        TestRecordWithUnion record = new TestRecordWithUnion();
        record.kind = fieldSetFlags()[0] ? this.kind : (org.apache.avro.test.Kind) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestRecordWithUnion>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestRecordWithUnion>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestRecordWithUnion>
    READER$ = (org.apache.avro.io.DatumReader<TestRecordWithUnion>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.kind == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.kind.ordinal());
    }

    if (this.value == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.value);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.kind = null;
      } else {
        this.kind = org.apache.avro.test.Kind.values()[in.readEnum()];
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.value = null;
      } else {
        this.value = in.readString();
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.kind = null;
          } else {
            this.kind = org.apache.avro.test.Kind.values()[in.readEnum()];
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.value = null;
          } else {
            this.value = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










