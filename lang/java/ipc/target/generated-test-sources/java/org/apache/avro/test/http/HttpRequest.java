/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.test.http;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class HttpRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3019564634348882510L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HttpRequest\",\"namespace\":\"org.apache.avro.test.http\",\"fields\":[{\"name\":\"userAgent\",\"type\":{\"type\":\"record\",\"name\":\"UserAgent\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"useragent\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"URI\",\"type\":{\"type\":\"record\",\"name\":\"HttpURI\",\"fields\":[{\"name\":\"method\",\"type\":{\"type\":\"enum\",\"name\":\"HttpMethod\",\"symbols\":[\"GET\",\"POST\"]}},{\"name\":\"path\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"parameters\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"QueryParameter\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}},\"default\":[]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HttpRequest> ENCODER =
      new BinaryMessageEncoder<HttpRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HttpRequest> DECODER =
      new BinaryMessageDecoder<HttpRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<HttpRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<HttpRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<HttpRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HttpRequest>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this HttpRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a HttpRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a HttpRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static HttpRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.apache.avro.test.http.UserAgent userAgent;
  private org.apache.avro.test.http.HttpURI URI;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HttpRequest() {}

  /**
   * All-args constructor.
   * @param userAgent The new value for userAgent
   * @param URI The new value for URI
   */
  public HttpRequest(org.apache.avro.test.http.UserAgent userAgent, org.apache.avro.test.http.HttpURI URI) {
    this.userAgent = userAgent;
    this.URI = URI;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userAgent;
    case 1: return URI;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userAgent = (org.apache.avro.test.http.UserAgent)value$; break;
    case 1: URI = (org.apache.avro.test.http.HttpURI)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userAgent' field.
   * @return The value of the 'userAgent' field.
   */
  public org.apache.avro.test.http.UserAgent getUserAgent() {
    return userAgent;
  }

  /**
   * Gets the value of the 'userAgent' field as an Optional&lt;org.apache.avro.test.http.UserAgent&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.UserAgent&gt;.
   */
  public Optional<org.apache.avro.test.http.UserAgent> getOptionalUserAgent() {
    return Optional.<org.apache.avro.test.http.UserAgent>ofNullable(userAgent);
  }

  /**
   * Sets the value of the 'userAgent' field.
   * @param value the value to set.
   */
  public void setUserAgent(org.apache.avro.test.http.UserAgent value) {
    this.userAgent = value;
  }

  /**
   * Gets the value of the 'URI' field.
   * @return The value of the 'URI' field.
   */
  public org.apache.avro.test.http.HttpURI getURI() {
    return URI;
  }

  /**
   * Gets the value of the 'URI' field as an Optional&lt;org.apache.avro.test.http.HttpURI&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.HttpURI&gt;.
   */
  public Optional<org.apache.avro.test.http.HttpURI> getOptionalURI() {
    return Optional.<org.apache.avro.test.http.HttpURI>ofNullable(URI);
  }

  /**
   * Sets the value of the 'URI' field.
   * @param value the value to set.
   */
  public void setURI(org.apache.avro.test.http.HttpURI value) {
    this.URI = value;
  }

  /**
   * Creates a new HttpRequest RecordBuilder.
   * @return A new HttpRequest RecordBuilder
   */
  public static org.apache.avro.test.http.HttpRequest.Builder newBuilder() {
    return new org.apache.avro.test.http.HttpRequest.Builder();
  }

  /**
   * Creates a new HttpRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HttpRequest RecordBuilder
   */
  public static org.apache.avro.test.http.HttpRequest.Builder newBuilder(org.apache.avro.test.http.HttpRequest.Builder other) {
    if (other == null) {
      return new org.apache.avro.test.http.HttpRequest.Builder();
    } else {
      return new org.apache.avro.test.http.HttpRequest.Builder(other);
    }
  }

  /**
   * Creates a new HttpRequest RecordBuilder by copying an existing HttpRequest instance.
   * @param other The existing instance to copy.
   * @return A new HttpRequest RecordBuilder
   */
  public static org.apache.avro.test.http.HttpRequest.Builder newBuilder(org.apache.avro.test.http.HttpRequest other) {
    if (other == null) {
      return new org.apache.avro.test.http.HttpRequest.Builder();
    } else {
      return new org.apache.avro.test.http.HttpRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for HttpRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HttpRequest>
    implements org.apache.avro.data.RecordBuilder<HttpRequest> {

    private org.apache.avro.test.http.UserAgent userAgent;
    private org.apache.avro.test.http.UserAgent.Builder userAgentBuilder;
    private org.apache.avro.test.http.HttpURI URI;
    private org.apache.avro.test.http.HttpURI.Builder URIBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.test.http.HttpRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userAgent)) {
        this.userAgent = data().deepCopy(fields()[0].schema(), other.userAgent);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasUserAgentBuilder()) {
        this.userAgentBuilder = org.apache.avro.test.http.UserAgent.newBuilder(other.getUserAgentBuilder());
      }
      if (isValidValue(fields()[1], other.URI)) {
        this.URI = data().deepCopy(fields()[1].schema(), other.URI);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasURIBuilder()) {
        this.URIBuilder = org.apache.avro.test.http.HttpURI.newBuilder(other.getURIBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing HttpRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.test.http.HttpRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.userAgent)) {
        this.userAgent = data().deepCopy(fields()[0].schema(), other.userAgent);
        fieldSetFlags()[0] = true;
      }
      this.userAgentBuilder = null;
      if (isValidValue(fields()[1], other.URI)) {
        this.URI = data().deepCopy(fields()[1].schema(), other.URI);
        fieldSetFlags()[1] = true;
      }
      this.URIBuilder = null;
    }

    /**
      * Gets the value of the 'userAgent' field.
      * @return The value.
      */
    public org.apache.avro.test.http.UserAgent getUserAgent() {
      return userAgent;
    }

    /**
      * Gets the value of the 'userAgent' field as an Optional&lt;org.apache.avro.test.http.UserAgent&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.UserAgent&gt;.
      */
    public Optional<org.apache.avro.test.http.UserAgent> getOptionalUserAgent() {
      return Optional.<org.apache.avro.test.http.UserAgent>ofNullable(userAgent);
    }

    /**
      * Sets the value of the 'userAgent' field.
      * @param value The value of 'userAgent'.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpRequest.Builder setUserAgent(org.apache.avro.test.http.UserAgent value) {
      validate(fields()[0], value);
      this.userAgentBuilder = null;
      this.userAgent = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userAgent' field has been set.
      * @return True if the 'userAgent' field has been set, false otherwise.
      */
    public boolean hasUserAgent() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'userAgent' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.avro.test.http.UserAgent.Builder getUserAgentBuilder() {
      if (userAgentBuilder == null) {
        if (hasUserAgent()) {
          setUserAgentBuilder(org.apache.avro.test.http.UserAgent.newBuilder(userAgent));
        } else {
          setUserAgentBuilder(org.apache.avro.test.http.UserAgent.newBuilder());
        }
      }
      return userAgentBuilder;
    }

    /**
     * Sets the Builder instance for the 'userAgent' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.avro.test.http.HttpRequest.Builder setUserAgentBuilder(org.apache.avro.test.http.UserAgent.Builder value) {
      clearUserAgent();
      userAgentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'userAgent' field has an active Builder instance
     * @return True if the 'userAgent' field has an active Builder instance
     */
    public boolean hasUserAgentBuilder() {
      return userAgentBuilder != null;
    }

    /**
      * Clears the value of the 'userAgent' field.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpRequest.Builder clearUserAgent() {
      userAgent = null;
      userAgentBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'URI' field.
      * @return The value.
      */
    public org.apache.avro.test.http.HttpURI getURI() {
      return URI;
    }

    /**
      * Gets the value of the 'URI' field as an Optional&lt;org.apache.avro.test.http.HttpURI&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.HttpURI&gt;.
      */
    public Optional<org.apache.avro.test.http.HttpURI> getOptionalURI() {
      return Optional.<org.apache.avro.test.http.HttpURI>ofNullable(URI);
    }

    /**
      * Sets the value of the 'URI' field.
      * @param value The value of 'URI'.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpRequest.Builder setURI(org.apache.avro.test.http.HttpURI value) {
      validate(fields()[1], value);
      this.URIBuilder = null;
      this.URI = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'URI' field has been set.
      * @return True if the 'URI' field has been set, false otherwise.
      */
    public boolean hasURI() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'URI' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.avro.test.http.HttpURI.Builder getURIBuilder() {
      if (URIBuilder == null) {
        if (hasURI()) {
          setURIBuilder(org.apache.avro.test.http.HttpURI.newBuilder(URI));
        } else {
          setURIBuilder(org.apache.avro.test.http.HttpURI.newBuilder());
        }
      }
      return URIBuilder;
    }

    /**
     * Sets the Builder instance for the 'URI' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.avro.test.http.HttpRequest.Builder setURIBuilder(org.apache.avro.test.http.HttpURI.Builder value) {
      clearURI();
      URIBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'URI' field has an active Builder instance
     * @return True if the 'URI' field has an active Builder instance
     */
    public boolean hasURIBuilder() {
      return URIBuilder != null;
    }

    /**
      * Clears the value of the 'URI' field.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpRequest.Builder clearURI() {
      URI = null;
      URIBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HttpRequest build() {
      try {
        HttpRequest record = new HttpRequest();
        if (userAgentBuilder != null) {
          try {
            record.userAgent = this.userAgentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("userAgent"));
            throw e;
          }
        } else {
          record.userAgent = fieldSetFlags()[0] ? this.userAgent : (org.apache.avro.test.http.UserAgent) defaultValue(fields()[0]);
        }
        if (URIBuilder != null) {
          try {
            record.URI = this.URIBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("URI"));
            throw e;
          }
        } else {
          record.URI = fieldSetFlags()[1] ? this.URI : (org.apache.avro.test.http.HttpURI) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HttpRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<HttpRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HttpRequest>
    READER$ = (org.apache.avro.io.DatumReader<HttpRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.userAgent.customEncode(out);

    this.URI.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.userAgent == null) {
        this.userAgent = new org.apache.avro.test.http.UserAgent();
      }
      this.userAgent.customDecode(in);

      if (this.URI == null) {
        this.URI = new org.apache.avro.test.http.HttpURI();
      }
      this.URI.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.userAgent == null) {
            this.userAgent = new org.apache.avro.test.http.UserAgent();
          }
          this.userAgent.customDecode(in);
          break;

        case 1:
          if (this.URI == null) {
            this.URI = new org.apache.avro.test.http.HttpURI();
          }
          this.URI.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










