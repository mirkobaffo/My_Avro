/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.test.http;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class HttpURI extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1490724014183512418L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HttpURI\",\"namespace\":\"org.apache.avro.test.http\",\"fields\":[{\"name\":\"method\",\"type\":{\"type\":\"enum\",\"name\":\"HttpMethod\",\"symbols\":[\"GET\",\"POST\"]}},{\"name\":\"path\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"parameters\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"QueryParameter\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HttpURI> ENCODER =
      new BinaryMessageEncoder<HttpURI>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HttpURI> DECODER =
      new BinaryMessageDecoder<HttpURI>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<HttpURI> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<HttpURI> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<HttpURI> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HttpURI>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this HttpURI to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a HttpURI from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a HttpURI instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static HttpURI fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.apache.avro.test.http.HttpMethod method;
  private java.lang.String path;
  private java.util.List<org.apache.avro.test.http.QueryParameter> parameters;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HttpURI() {}

  /**
   * All-args constructor.
   * @param method The new value for method
   * @param path The new value for path
   * @param parameters The new value for parameters
   */
  public HttpURI(org.apache.avro.test.http.HttpMethod method, java.lang.String path, java.util.List<org.apache.avro.test.http.QueryParameter> parameters) {
    this.method = method;
    this.path = path;
    this.parameters = parameters;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return method;
    case 1: return path;
    case 2: return parameters;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: method = (org.apache.avro.test.http.HttpMethod)value$; break;
    case 1: path = value$ != null ? value$.toString() : null; break;
    case 2: parameters = (java.util.List<org.apache.avro.test.http.QueryParameter>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'method' field.
   * @return The value of the 'method' field.
   */
  public org.apache.avro.test.http.HttpMethod getMethod() {
    return method;
  }

  /**
   * Gets the value of the 'method' field as an Optional&lt;org.apache.avro.test.http.HttpMethod&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.HttpMethod&gt;.
   */
  public Optional<org.apache.avro.test.http.HttpMethod> getOptionalMethod() {
    return Optional.<org.apache.avro.test.http.HttpMethod>ofNullable(method);
  }

  /**
   * Sets the value of the 'method' field.
   * @param value the value to set.
   */
  public void setMethod(org.apache.avro.test.http.HttpMethod value) {
    this.method = value;
  }

  /**
   * Gets the value of the 'path' field.
   * @return The value of the 'path' field.
   */
  public java.lang.String getPath() {
    return path;
  }

  /**
   * Gets the value of the 'path' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalPath() {
    return Optional.<java.lang.String>ofNullable(path);
  }

  /**
   * Sets the value of the 'path' field.
   * @param value the value to set.
   */
  public void setPath(java.lang.String value) {
    this.path = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * @return The value of the 'parameters' field.
   */
  public java.util.List<org.apache.avro.test.http.QueryParameter> getParameters() {
    return parameters;
  }

  /**
   * Gets the value of the 'parameters' field as an Optional&lt;java.util.List<org.apache.avro.test.http.QueryParameter>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.List<org.apache.avro.test.http.QueryParameter>&gt;.
   */
  public Optional<java.util.List<org.apache.avro.test.http.QueryParameter>> getOptionalParameters() {
    return Optional.<java.util.List<org.apache.avro.test.http.QueryParameter>>ofNullable(parameters);
  }

  /**
   * Sets the value of the 'parameters' field.
   * @param value the value to set.
   */
  public void setParameters(java.util.List<org.apache.avro.test.http.QueryParameter> value) {
    this.parameters = value;
  }

  /**
   * Creates a new HttpURI RecordBuilder.
   * @return A new HttpURI RecordBuilder
   */
  public static org.apache.avro.test.http.HttpURI.Builder newBuilder() {
    return new org.apache.avro.test.http.HttpURI.Builder();
  }

  /**
   * Creates a new HttpURI RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HttpURI RecordBuilder
   */
  public static org.apache.avro.test.http.HttpURI.Builder newBuilder(org.apache.avro.test.http.HttpURI.Builder other) {
    if (other == null) {
      return new org.apache.avro.test.http.HttpURI.Builder();
    } else {
      return new org.apache.avro.test.http.HttpURI.Builder(other);
    }
  }

  /**
   * Creates a new HttpURI RecordBuilder by copying an existing HttpURI instance.
   * @param other The existing instance to copy.
   * @return A new HttpURI RecordBuilder
   */
  public static org.apache.avro.test.http.HttpURI.Builder newBuilder(org.apache.avro.test.http.HttpURI other) {
    if (other == null) {
      return new org.apache.avro.test.http.HttpURI.Builder();
    } else {
      return new org.apache.avro.test.http.HttpURI.Builder(other);
    }
  }

  /**
   * RecordBuilder for HttpURI instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HttpURI>
    implements org.apache.avro.data.RecordBuilder<HttpURI> {

    private org.apache.avro.test.http.HttpMethod method;
    private java.lang.String path;
    private java.util.List<org.apache.avro.test.http.QueryParameter> parameters;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.test.http.HttpURI.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.method)) {
        this.method = data().deepCopy(fields()[0].schema(), other.method);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.path)) {
        this.path = data().deepCopy(fields()[1].schema(), other.path);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.parameters)) {
        this.parameters = data().deepCopy(fields()[2].schema(), other.parameters);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing HttpURI instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.test.http.HttpURI other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.method)) {
        this.method = data().deepCopy(fields()[0].schema(), other.method);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.path)) {
        this.path = data().deepCopy(fields()[1].schema(), other.path);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.parameters)) {
        this.parameters = data().deepCopy(fields()[2].schema(), other.parameters);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'method' field.
      * @return The value.
      */
    public org.apache.avro.test.http.HttpMethod getMethod() {
      return method;
    }

    /**
      * Gets the value of the 'method' field as an Optional&lt;org.apache.avro.test.http.HttpMethod&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.HttpMethod&gt;.
      */
    public Optional<org.apache.avro.test.http.HttpMethod> getOptionalMethod() {
      return Optional.<org.apache.avro.test.http.HttpMethod>ofNullable(method);
    }

    /**
      * Sets the value of the 'method' field.
      * @param value The value of 'method'.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpURI.Builder setMethod(org.apache.avro.test.http.HttpMethod value) {
      validate(fields()[0], value);
      this.method = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'method' field has been set.
      * @return True if the 'method' field has been set, false otherwise.
      */
    public boolean hasMethod() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'method' field.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpURI.Builder clearMethod() {
      method = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'path' field.
      * @return The value.
      */
    public java.lang.String getPath() {
      return path;
    }

    /**
      * Gets the value of the 'path' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalPath() {
      return Optional.<java.lang.String>ofNullable(path);
    }

    /**
      * Sets the value of the 'path' field.
      * @param value The value of 'path'.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpURI.Builder setPath(java.lang.String value) {
      validate(fields()[1], value);
      this.path = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'path' field has been set.
      * @return True if the 'path' field has been set, false otherwise.
      */
    public boolean hasPath() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'path' field.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpURI.Builder clearPath() {
      path = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'parameters' field.
      * @return The value.
      */
    public java.util.List<org.apache.avro.test.http.QueryParameter> getParameters() {
      return parameters;
    }

    /**
      * Gets the value of the 'parameters' field as an Optional&lt;java.util.List<org.apache.avro.test.http.QueryParameter>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.List<org.apache.avro.test.http.QueryParameter>&gt;.
      */
    public Optional<java.util.List<org.apache.avro.test.http.QueryParameter>> getOptionalParameters() {
      return Optional.<java.util.List<org.apache.avro.test.http.QueryParameter>>ofNullable(parameters);
    }

    /**
      * Sets the value of the 'parameters' field.
      * @param value The value of 'parameters'.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpURI.Builder setParameters(java.util.List<org.apache.avro.test.http.QueryParameter> value) {
      validate(fields()[2], value);
      this.parameters = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'parameters' field has been set.
      * @return True if the 'parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'parameters' field.
      * @return This builder.
      */
    public org.apache.avro.test.http.HttpURI.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HttpURI build() {
      try {
        HttpURI record = new HttpURI();
        record.method = fieldSetFlags()[0] ? this.method : (org.apache.avro.test.http.HttpMethod) defaultValue(fields()[0]);
        record.path = fieldSetFlags()[1] ? this.path : (java.lang.String) defaultValue(fields()[1]);
        record.parameters = fieldSetFlags()[2] ? this.parameters : (java.util.List<org.apache.avro.test.http.QueryParameter>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HttpURI>
    WRITER$ = (org.apache.avro.io.DatumWriter<HttpURI>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HttpURI>
    READER$ = (org.apache.avro.io.DatumReader<HttpURI>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.method.ordinal());

    out.writeString(this.path);

    long size0 = this.parameters.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (org.apache.avro.test.http.QueryParameter e0: this.parameters) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.method = org.apache.avro.test.http.HttpMethod.values()[in.readEnum()];

      this.path = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<org.apache.avro.test.http.QueryParameter> a0 = this.parameters;
      if (a0 == null) {
        a0 = new SpecificData.Array<org.apache.avro.test.http.QueryParameter>((int)size0, SCHEMA$.getField("parameters").schema());
        this.parameters = a0;
      } else a0.clear();
      SpecificData.Array<org.apache.avro.test.http.QueryParameter> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.apache.avro.test.http.QueryParameter>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          org.apache.avro.test.http.QueryParameter e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new org.apache.avro.test.http.QueryParameter();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.method = org.apache.avro.test.http.HttpMethod.values()[in.readEnum()];
          break;

        case 1:
          this.path = in.readString();
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<org.apache.avro.test.http.QueryParameter> a0 = this.parameters;
          if (a0 == null) {
            a0 = new SpecificData.Array<org.apache.avro.test.http.QueryParameter>((int)size0, SCHEMA$.getField("parameters").schema());
            this.parameters = a0;
          } else a0.clear();
          SpecificData.Array<org.apache.avro.test.http.QueryParameter> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.apache.avro.test.http.QueryParameter>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              org.apache.avro.test.http.QueryParameter e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new org.apache.avro.test.http.QueryParameter();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










