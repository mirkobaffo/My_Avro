/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.test.http;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class Request extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8131125302738893431L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Request\",\"namespace\":\"org.apache.avro.test.http\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"connection\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"NetworkConnection\",\"fields\":[{\"name\":\"networkType\",\"type\":{\"type\":\"enum\",\"name\":\"NetworkType\",\"symbols\":[\"IPv4\",\"IPv6\"]}},{\"name\":\"networkAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null},{\"name\":\"httpRequest\",\"type\":{\"type\":\"record\",\"name\":\"HttpRequest\",\"fields\":[{\"name\":\"userAgent\",\"type\":{\"type\":\"record\",\"name\":\"UserAgent\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"useragent\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"URI\",\"type\":{\"type\":\"record\",\"name\":\"HttpURI\",\"fields\":[{\"name\":\"method\",\"type\":{\"type\":\"enum\",\"name\":\"HttpMethod\",\"symbols\":[\"GET\",\"POST\"]}},{\"name\":\"path\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"parameters\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"QueryParameter\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}},\"default\":[]}]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Request> ENCODER =
      new BinaryMessageEncoder<Request>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Request> DECODER =
      new BinaryMessageDecoder<Request>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Request> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Request> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Request> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Request>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Request to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Request from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Request instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Request fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long timestamp;
  private org.apache.avro.test.http.NetworkConnection connection;
  private org.apache.avro.test.http.HttpRequest httpRequest;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Request() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param connection The new value for connection
   * @param httpRequest The new value for httpRequest
   */
  public Request(java.lang.Long timestamp, org.apache.avro.test.http.NetworkConnection connection, org.apache.avro.test.http.HttpRequest httpRequest) {
    this.timestamp = timestamp;
    this.connection = connection;
    this.httpRequest = httpRequest;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return connection;
    case 2: return httpRequest;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: connection = (org.apache.avro.test.http.NetworkConnection)value$; break;
    case 2: httpRequest = (org.apache.avro.test.http.HttpRequest)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }

  /**
   * Gets the value of the 'timestamp' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalTimestamp() {
    return Optional.<java.lang.Long>ofNullable(timestamp);
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'connection' field.
   * @return The value of the 'connection' field.
   */
  public org.apache.avro.test.http.NetworkConnection getConnection() {
    return connection;
  }

  /**
   * Gets the value of the 'connection' field as an Optional&lt;org.apache.avro.test.http.NetworkConnection&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.NetworkConnection&gt;.
   */
  public Optional<org.apache.avro.test.http.NetworkConnection> getOptionalConnection() {
    return Optional.<org.apache.avro.test.http.NetworkConnection>ofNullable(connection);
  }

  /**
   * Sets the value of the 'connection' field.
   * @param value the value to set.
   */
  public void setConnection(org.apache.avro.test.http.NetworkConnection value) {
    this.connection = value;
  }

  /**
   * Gets the value of the 'httpRequest' field.
   * @return The value of the 'httpRequest' field.
   */
  public org.apache.avro.test.http.HttpRequest getHttpRequest() {
    return httpRequest;
  }

  /**
   * Gets the value of the 'httpRequest' field as an Optional&lt;org.apache.avro.test.http.HttpRequest&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.HttpRequest&gt;.
   */
  public Optional<org.apache.avro.test.http.HttpRequest> getOptionalHttpRequest() {
    return Optional.<org.apache.avro.test.http.HttpRequest>ofNullable(httpRequest);
  }

  /**
   * Sets the value of the 'httpRequest' field.
   * @param value the value to set.
   */
  public void setHttpRequest(org.apache.avro.test.http.HttpRequest value) {
    this.httpRequest = value;
  }

  /**
   * Creates a new Request RecordBuilder.
   * @return A new Request RecordBuilder
   */
  public static org.apache.avro.test.http.Request.Builder newBuilder() {
    return new org.apache.avro.test.http.Request.Builder();
  }

  /**
   * Creates a new Request RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Request RecordBuilder
   */
  public static org.apache.avro.test.http.Request.Builder newBuilder(org.apache.avro.test.http.Request.Builder other) {
    if (other == null) {
      return new org.apache.avro.test.http.Request.Builder();
    } else {
      return new org.apache.avro.test.http.Request.Builder(other);
    }
  }

  /**
   * Creates a new Request RecordBuilder by copying an existing Request instance.
   * @param other The existing instance to copy.
   * @return A new Request RecordBuilder
   */
  public static org.apache.avro.test.http.Request.Builder newBuilder(org.apache.avro.test.http.Request other) {
    if (other == null) {
      return new org.apache.avro.test.http.Request.Builder();
    } else {
      return new org.apache.avro.test.http.Request.Builder(other);
    }
  }

  /**
   * RecordBuilder for Request instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Request>
    implements org.apache.avro.data.RecordBuilder<Request> {

    private long timestamp;
    private org.apache.avro.test.http.NetworkConnection connection;
    private org.apache.avro.test.http.NetworkConnection.Builder connectionBuilder;
    private org.apache.avro.test.http.HttpRequest httpRequest;
    private org.apache.avro.test.http.HttpRequest.Builder httpRequestBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.test.http.Request.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.connection)) {
        this.connection = data().deepCopy(fields()[1].schema(), other.connection);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasConnectionBuilder()) {
        this.connectionBuilder = org.apache.avro.test.http.NetworkConnection.newBuilder(other.getConnectionBuilder());
      }
      if (isValidValue(fields()[2], other.httpRequest)) {
        this.httpRequest = data().deepCopy(fields()[2].schema(), other.httpRequest);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasHttpRequestBuilder()) {
        this.httpRequestBuilder = org.apache.avro.test.http.HttpRequest.newBuilder(other.getHttpRequestBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Request instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.test.http.Request other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.connection)) {
        this.connection = data().deepCopy(fields()[1].schema(), other.connection);
        fieldSetFlags()[1] = true;
      }
      this.connectionBuilder = null;
      if (isValidValue(fields()[2], other.httpRequest)) {
        this.httpRequest = data().deepCopy(fields()[2].schema(), other.httpRequest);
        fieldSetFlags()[2] = true;
      }
      this.httpRequestBuilder = null;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }

    /**
      * Gets the value of the 'timestamp' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalTimestamp() {
      return Optional.<java.lang.Long>ofNullable(timestamp);
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.apache.avro.test.http.Request.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.apache.avro.test.http.Request.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'connection' field.
      * @return The value.
      */
    public org.apache.avro.test.http.NetworkConnection getConnection() {
      return connection;
    }

    /**
      * Gets the value of the 'connection' field as an Optional&lt;org.apache.avro.test.http.NetworkConnection&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.NetworkConnection&gt;.
      */
    public Optional<org.apache.avro.test.http.NetworkConnection> getOptionalConnection() {
      return Optional.<org.apache.avro.test.http.NetworkConnection>ofNullable(connection);
    }

    /**
      * Sets the value of the 'connection' field.
      * @param value The value of 'connection'.
      * @return This builder.
      */
    public org.apache.avro.test.http.Request.Builder setConnection(org.apache.avro.test.http.NetworkConnection value) {
      validate(fields()[1], value);
      this.connectionBuilder = null;
      this.connection = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'connection' field has been set.
      * @return True if the 'connection' field has been set, false otherwise.
      */
    public boolean hasConnection() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'connection' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.avro.test.http.NetworkConnection.Builder getConnectionBuilder() {
      if (connectionBuilder == null) {
        if (hasConnection()) {
          setConnectionBuilder(org.apache.avro.test.http.NetworkConnection.newBuilder(connection));
        } else {
          setConnectionBuilder(org.apache.avro.test.http.NetworkConnection.newBuilder());
        }
      }
      return connectionBuilder;
    }

    /**
     * Sets the Builder instance for the 'connection' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.avro.test.http.Request.Builder setConnectionBuilder(org.apache.avro.test.http.NetworkConnection.Builder value) {
      clearConnection();
      connectionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'connection' field has an active Builder instance
     * @return True if the 'connection' field has an active Builder instance
     */
    public boolean hasConnectionBuilder() {
      return connectionBuilder != null;
    }

    /**
      * Clears the value of the 'connection' field.
      * @return This builder.
      */
    public org.apache.avro.test.http.Request.Builder clearConnection() {
      connection = null;
      connectionBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'httpRequest' field.
      * @return The value.
      */
    public org.apache.avro.test.http.HttpRequest getHttpRequest() {
      return httpRequest;
    }

    /**
      * Gets the value of the 'httpRequest' field as an Optional&lt;org.apache.avro.test.http.HttpRequest&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.test.http.HttpRequest&gt;.
      */
    public Optional<org.apache.avro.test.http.HttpRequest> getOptionalHttpRequest() {
      return Optional.<org.apache.avro.test.http.HttpRequest>ofNullable(httpRequest);
    }

    /**
      * Sets the value of the 'httpRequest' field.
      * @param value The value of 'httpRequest'.
      * @return This builder.
      */
    public org.apache.avro.test.http.Request.Builder setHttpRequest(org.apache.avro.test.http.HttpRequest value) {
      validate(fields()[2], value);
      this.httpRequestBuilder = null;
      this.httpRequest = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'httpRequest' field has been set.
      * @return True if the 'httpRequest' field has been set, false otherwise.
      */
    public boolean hasHttpRequest() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'httpRequest' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.avro.test.http.HttpRequest.Builder getHttpRequestBuilder() {
      if (httpRequestBuilder == null) {
        if (hasHttpRequest()) {
          setHttpRequestBuilder(org.apache.avro.test.http.HttpRequest.newBuilder(httpRequest));
        } else {
          setHttpRequestBuilder(org.apache.avro.test.http.HttpRequest.newBuilder());
        }
      }
      return httpRequestBuilder;
    }

    /**
     * Sets the Builder instance for the 'httpRequest' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.avro.test.http.Request.Builder setHttpRequestBuilder(org.apache.avro.test.http.HttpRequest.Builder value) {
      clearHttpRequest();
      httpRequestBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'httpRequest' field has an active Builder instance
     * @return True if the 'httpRequest' field has an active Builder instance
     */
    public boolean hasHttpRequestBuilder() {
      return httpRequestBuilder != null;
    }

    /**
      * Clears the value of the 'httpRequest' field.
      * @return This builder.
      */
    public org.apache.avro.test.http.Request.Builder clearHttpRequest() {
      httpRequest = null;
      httpRequestBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Request build() {
      try {
        Request record = new Request();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        if (connectionBuilder != null) {
          try {
            record.connection = this.connectionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("connection"));
            throw e;
          }
        } else {
          record.connection = fieldSetFlags()[1] ? this.connection : (org.apache.avro.test.http.NetworkConnection) defaultValue(fields()[1]);
        }
        if (httpRequestBuilder != null) {
          try {
            record.httpRequest = this.httpRequestBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("httpRequest"));
            throw e;
          }
        } else {
          record.httpRequest = fieldSetFlags()[2] ? this.httpRequest : (org.apache.avro.test.http.HttpRequest) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Request>
    WRITER$ = (org.apache.avro.io.DatumWriter<Request>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Request>
    READER$ = (org.apache.avro.io.DatumReader<Request>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timestamp);

    if (this.connection == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.connection.customEncode(out);
    }

    this.httpRequest.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.connection = null;
      } else {
        if (this.connection == null) {
          this.connection = new org.apache.avro.test.http.NetworkConnection();
        }
        this.connection.customDecode(in);
      }

      if (this.httpRequest == null) {
        this.httpRequest = new org.apache.avro.test.http.HttpRequest();
      }
      this.httpRequest.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.connection = null;
          } else {
            if (this.connection == null) {
              this.connection = new org.apache.avro.test.http.NetworkConnection();
            }
            this.connection.customDecode(in);
          }
          break;

        case 2:
          if (this.httpRequest == null) {
            this.httpRequest = new org.apache.avro.test.http.HttpRequest();
          }
          this.httpRequest.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










