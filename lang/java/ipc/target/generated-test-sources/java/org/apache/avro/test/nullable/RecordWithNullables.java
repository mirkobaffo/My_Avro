/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.test.nullable;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class RecordWithNullables extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2813777847455745567L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordWithNullables\",\"namespace\":\"org.apache.avro.test.nullable\",\"fields\":[{\"name\":\"nullableString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nullableLong\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"nullableInt\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"nullableMap\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nullableArray\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"nullableRecord\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SubRecord\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null},{\"name\":\"nullableEnum\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"MyEnum\",\"symbols\":[\"One\",\"Two\"]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordWithNullables> ENCODER =
      new BinaryMessageEncoder<RecordWithNullables>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordWithNullables> DECODER =
      new BinaryMessageDecoder<RecordWithNullables>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordWithNullables> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordWithNullables> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordWithNullables> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordWithNullables>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordWithNullables to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordWithNullables from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordWithNullables instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordWithNullables fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String nullableString;
  private java.lang.Long nullableLong;
  private java.lang.Integer nullableInt;
  private java.util.Map<java.lang.String,java.lang.String> nullableMap;
  private java.util.List<java.lang.String> nullableArray;
  private org.apache.avro.test.nullable.SubRecord nullableRecord;
  private org.apache.avro.test.nullable.MyEnum nullableEnum;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordWithNullables() {}

  /**
   * All-args constructor.
   * @param nullableString The new value for nullableString
   * @param nullableLong The new value for nullableLong
   * @param nullableInt The new value for nullableInt
   * @param nullableMap The new value for nullableMap
   * @param nullableArray The new value for nullableArray
   * @param nullableRecord The new value for nullableRecord
   * @param nullableEnum The new value for nullableEnum
   */
  public RecordWithNullables(java.lang.String nullableString, java.lang.Long nullableLong, java.lang.Integer nullableInt, java.util.Map<java.lang.String,java.lang.String> nullableMap, java.util.List<java.lang.String> nullableArray, org.apache.avro.test.nullable.SubRecord nullableRecord, org.apache.avro.test.nullable.MyEnum nullableEnum) {
    this.nullableString = nullableString;
    this.nullableLong = nullableLong;
    this.nullableInt = nullableInt;
    this.nullableMap = nullableMap;
    this.nullableArray = nullableArray;
    this.nullableRecord = nullableRecord;
    this.nullableEnum = nullableEnum;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nullableString;
    case 1: return nullableLong;
    case 2: return nullableInt;
    case 3: return nullableMap;
    case 4: return nullableArray;
    case 5: return nullableRecord;
    case 6: return nullableEnum;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nullableString = value$ != null ? value$.toString() : null; break;
    case 1: nullableLong = (java.lang.Long)value$; break;
    case 2: nullableInt = (java.lang.Integer)value$; break;
    case 3: nullableMap = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 4: nullableArray = (java.util.List<java.lang.String>)value$; break;
    case 5: nullableRecord = (org.apache.avro.test.nullable.SubRecord)value$; break;
    case 6: nullableEnum = (org.apache.avro.test.nullable.MyEnum)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'nullableString' field.
   * @return The value of the 'nullableString' field.
   */
  public java.lang.String getNullableString() {
    return nullableString;
  }

  /**
   * Gets the value of the 'nullableString' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalNullableString() {
    return Optional.<java.lang.String>ofNullable(nullableString);
  }

  /**
   * Sets the value of the 'nullableString' field.
   * @param value the value to set.
   */
  public void setNullableString(java.lang.String value) {
    this.nullableString = value;
  }

  /**
   * Gets the value of the 'nullableLong' field.
   * @return The value of the 'nullableLong' field.
   */
  public java.lang.Long getNullableLong() {
    return nullableLong;
  }

  /**
   * Gets the value of the 'nullableLong' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalNullableLong() {
    return Optional.<java.lang.Long>ofNullable(nullableLong);
  }

  /**
   * Sets the value of the 'nullableLong' field.
   * @param value the value to set.
   */
  public void setNullableLong(java.lang.Long value) {
    this.nullableLong = value;
  }

  /**
   * Gets the value of the 'nullableInt' field.
   * @return The value of the 'nullableInt' field.
   */
  public java.lang.Integer getNullableInt() {
    return nullableInt;
  }

  /**
   * Gets the value of the 'nullableInt' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalNullableInt() {
    return Optional.<java.lang.Integer>ofNullable(nullableInt);
  }

  /**
   * Sets the value of the 'nullableInt' field.
   * @param value the value to set.
   */
  public void setNullableInt(java.lang.Integer value) {
    this.nullableInt = value;
  }

  /**
   * Gets the value of the 'nullableMap' field.
   * @return The value of the 'nullableMap' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getNullableMap() {
    return nullableMap;
  }

  /**
   * Gets the value of the 'nullableMap' field as an Optional&lt;java.util.Map<java.lang.String,java.lang.String>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.Map<java.lang.String,java.lang.String>&gt;.
   */
  public Optional<java.util.Map<java.lang.String,java.lang.String>> getOptionalNullableMap() {
    return Optional.<java.util.Map<java.lang.String,java.lang.String>>ofNullable(nullableMap);
  }

  /**
   * Sets the value of the 'nullableMap' field.
   * @param value the value to set.
   */
  public void setNullableMap(java.util.Map<java.lang.String,java.lang.String> value) {
    this.nullableMap = value;
  }

  /**
   * Gets the value of the 'nullableArray' field.
   * @return The value of the 'nullableArray' field.
   */
  public java.util.List<java.lang.String> getNullableArray() {
    return nullableArray;
  }

  /**
   * Gets the value of the 'nullableArray' field as an Optional&lt;java.util.List<java.lang.String>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.List<java.lang.String>&gt;.
   */
  public Optional<java.util.List<java.lang.String>> getOptionalNullableArray() {
    return Optional.<java.util.List<java.lang.String>>ofNullable(nullableArray);
  }

  /**
   * Sets the value of the 'nullableArray' field.
   * @param value the value to set.
   */
  public void setNullableArray(java.util.List<java.lang.String> value) {
    this.nullableArray = value;
  }

  /**
   * Gets the value of the 'nullableRecord' field.
   * @return The value of the 'nullableRecord' field.
   */
  public org.apache.avro.test.nullable.SubRecord getNullableRecord() {
    return nullableRecord;
  }

  /**
   * Gets the value of the 'nullableRecord' field as an Optional&lt;org.apache.avro.test.nullable.SubRecord&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.test.nullable.SubRecord&gt;.
   */
  public Optional<org.apache.avro.test.nullable.SubRecord> getOptionalNullableRecord() {
    return Optional.<org.apache.avro.test.nullable.SubRecord>ofNullable(nullableRecord);
  }

  /**
   * Sets the value of the 'nullableRecord' field.
   * @param value the value to set.
   */
  public void setNullableRecord(org.apache.avro.test.nullable.SubRecord value) {
    this.nullableRecord = value;
  }

  /**
   * Gets the value of the 'nullableEnum' field.
   * @return The value of the 'nullableEnum' field.
   */
  public org.apache.avro.test.nullable.MyEnum getNullableEnum() {
    return nullableEnum;
  }

  /**
   * Gets the value of the 'nullableEnum' field as an Optional&lt;org.apache.avro.test.nullable.MyEnum&gt;.
   * @return The value wrapped in an Optional&lt;org.apache.avro.test.nullable.MyEnum&gt;.
   */
  public Optional<org.apache.avro.test.nullable.MyEnum> getOptionalNullableEnum() {
    return Optional.<org.apache.avro.test.nullable.MyEnum>ofNullable(nullableEnum);
  }

  /**
   * Sets the value of the 'nullableEnum' field.
   * @param value the value to set.
   */
  public void setNullableEnum(org.apache.avro.test.nullable.MyEnum value) {
    this.nullableEnum = value;
  }

  /**
   * Creates a new RecordWithNullables RecordBuilder.
   * @return A new RecordWithNullables RecordBuilder
   */
  public static org.apache.avro.test.nullable.RecordWithNullables.Builder newBuilder() {
    return new org.apache.avro.test.nullable.RecordWithNullables.Builder();
  }

  /**
   * Creates a new RecordWithNullables RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordWithNullables RecordBuilder
   */
  public static org.apache.avro.test.nullable.RecordWithNullables.Builder newBuilder(org.apache.avro.test.nullable.RecordWithNullables.Builder other) {
    if (other == null) {
      return new org.apache.avro.test.nullable.RecordWithNullables.Builder();
    } else {
      return new org.apache.avro.test.nullable.RecordWithNullables.Builder(other);
    }
  }

  /**
   * Creates a new RecordWithNullables RecordBuilder by copying an existing RecordWithNullables instance.
   * @param other The existing instance to copy.
   * @return A new RecordWithNullables RecordBuilder
   */
  public static org.apache.avro.test.nullable.RecordWithNullables.Builder newBuilder(org.apache.avro.test.nullable.RecordWithNullables other) {
    if (other == null) {
      return new org.apache.avro.test.nullable.RecordWithNullables.Builder();
    } else {
      return new org.apache.avro.test.nullable.RecordWithNullables.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordWithNullables instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordWithNullables>
    implements org.apache.avro.data.RecordBuilder<RecordWithNullables> {

    private java.lang.String nullableString;
    private java.lang.Long nullableLong;
    private java.lang.Integer nullableInt;
    private java.util.Map<java.lang.String,java.lang.String> nullableMap;
    private java.util.List<java.lang.String> nullableArray;
    private org.apache.avro.test.nullable.SubRecord nullableRecord;
    private org.apache.avro.test.nullable.SubRecord.Builder nullableRecordBuilder;
    private org.apache.avro.test.nullable.MyEnum nullableEnum;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.test.nullable.RecordWithNullables.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nullableString)) {
        this.nullableString = data().deepCopy(fields()[0].schema(), other.nullableString);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nullableLong)) {
        this.nullableLong = data().deepCopy(fields()[1].schema(), other.nullableLong);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.nullableInt)) {
        this.nullableInt = data().deepCopy(fields()[2].schema(), other.nullableInt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.nullableMap)) {
        this.nullableMap = data().deepCopy(fields()[3].schema(), other.nullableMap);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.nullableArray)) {
        this.nullableArray = data().deepCopy(fields()[4].schema(), other.nullableArray);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.nullableRecord)) {
        this.nullableRecord = data().deepCopy(fields()[5].schema(), other.nullableRecord);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasNullableRecordBuilder()) {
        this.nullableRecordBuilder = org.apache.avro.test.nullable.SubRecord.newBuilder(other.getNullableRecordBuilder());
      }
      if (isValidValue(fields()[6], other.nullableEnum)) {
        this.nullableEnum = data().deepCopy(fields()[6].schema(), other.nullableEnum);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordWithNullables instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.test.nullable.RecordWithNullables other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.nullableString)) {
        this.nullableString = data().deepCopy(fields()[0].schema(), other.nullableString);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nullableLong)) {
        this.nullableLong = data().deepCopy(fields()[1].schema(), other.nullableLong);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nullableInt)) {
        this.nullableInt = data().deepCopy(fields()[2].schema(), other.nullableInt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nullableMap)) {
        this.nullableMap = data().deepCopy(fields()[3].schema(), other.nullableMap);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nullableArray)) {
        this.nullableArray = data().deepCopy(fields()[4].schema(), other.nullableArray);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nullableRecord)) {
        this.nullableRecord = data().deepCopy(fields()[5].schema(), other.nullableRecord);
        fieldSetFlags()[5] = true;
      }
      this.nullableRecordBuilder = null;
      if (isValidValue(fields()[6], other.nullableEnum)) {
        this.nullableEnum = data().deepCopy(fields()[6].schema(), other.nullableEnum);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'nullableString' field.
      * @return The value.
      */
    public java.lang.String getNullableString() {
      return nullableString;
    }

    /**
      * Gets the value of the 'nullableString' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalNullableString() {
      return Optional.<java.lang.String>ofNullable(nullableString);
    }

    /**
      * Sets the value of the 'nullableString' field.
      * @param value The value of 'nullableString'.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder setNullableString(java.lang.String value) {
      validate(fields()[0], value);
      this.nullableString = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableString' field has been set.
      * @return True if the 'nullableString' field has been set, false otherwise.
      */
    public boolean hasNullableString() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'nullableString' field.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder clearNullableString() {
      nullableString = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableLong' field.
      * @return The value.
      */
    public java.lang.Long getNullableLong() {
      return nullableLong;
    }

    /**
      * Gets the value of the 'nullableLong' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalNullableLong() {
      return Optional.<java.lang.Long>ofNullable(nullableLong);
    }

    /**
      * Sets the value of the 'nullableLong' field.
      * @param value The value of 'nullableLong'.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder setNullableLong(java.lang.Long value) {
      validate(fields()[1], value);
      this.nullableLong = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableLong' field has been set.
      * @return True if the 'nullableLong' field has been set, false otherwise.
      */
    public boolean hasNullableLong() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nullableLong' field.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder clearNullableLong() {
      nullableLong = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableInt' field.
      * @return The value.
      */
    public java.lang.Integer getNullableInt() {
      return nullableInt;
    }

    /**
      * Gets the value of the 'nullableInt' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalNullableInt() {
      return Optional.<java.lang.Integer>ofNullable(nullableInt);
    }

    /**
      * Sets the value of the 'nullableInt' field.
      * @param value The value of 'nullableInt'.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder setNullableInt(java.lang.Integer value) {
      validate(fields()[2], value);
      this.nullableInt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableInt' field has been set.
      * @return True if the 'nullableInt' field has been set, false otherwise.
      */
    public boolean hasNullableInt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'nullableInt' field.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder clearNullableInt() {
      nullableInt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableMap' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getNullableMap() {
      return nullableMap;
    }

    /**
      * Gets the value of the 'nullableMap' field as an Optional&lt;java.util.Map<java.lang.String,java.lang.String>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.Map<java.lang.String,java.lang.String>&gt;.
      */
    public Optional<java.util.Map<java.lang.String,java.lang.String>> getOptionalNullableMap() {
      return Optional.<java.util.Map<java.lang.String,java.lang.String>>ofNullable(nullableMap);
    }

    /**
      * Sets the value of the 'nullableMap' field.
      * @param value The value of 'nullableMap'.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder setNullableMap(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[3], value);
      this.nullableMap = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableMap' field has been set.
      * @return True if the 'nullableMap' field has been set, false otherwise.
      */
    public boolean hasNullableMap() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'nullableMap' field.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder clearNullableMap() {
      nullableMap = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableArray' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getNullableArray() {
      return nullableArray;
    }

    /**
      * Gets the value of the 'nullableArray' field as an Optional&lt;java.util.List<java.lang.String>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.List<java.lang.String>&gt;.
      */
    public Optional<java.util.List<java.lang.String>> getOptionalNullableArray() {
      return Optional.<java.util.List<java.lang.String>>ofNullable(nullableArray);
    }

    /**
      * Sets the value of the 'nullableArray' field.
      * @param value The value of 'nullableArray'.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder setNullableArray(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.nullableArray = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableArray' field has been set.
      * @return True if the 'nullableArray' field has been set, false otherwise.
      */
    public boolean hasNullableArray() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'nullableArray' field.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder clearNullableArray() {
      nullableArray = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableRecord' field.
      * @return The value.
      */
    public org.apache.avro.test.nullable.SubRecord getNullableRecord() {
      return nullableRecord;
    }

    /**
      * Gets the value of the 'nullableRecord' field as an Optional&lt;org.apache.avro.test.nullable.SubRecord&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.test.nullable.SubRecord&gt;.
      */
    public Optional<org.apache.avro.test.nullable.SubRecord> getOptionalNullableRecord() {
      return Optional.<org.apache.avro.test.nullable.SubRecord>ofNullable(nullableRecord);
    }

    /**
      * Sets the value of the 'nullableRecord' field.
      * @param value The value of 'nullableRecord'.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder setNullableRecord(org.apache.avro.test.nullable.SubRecord value) {
      validate(fields()[5], value);
      this.nullableRecordBuilder = null;
      this.nullableRecord = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableRecord' field has been set.
      * @return True if the 'nullableRecord' field has been set, false otherwise.
      */
    public boolean hasNullableRecord() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'nullableRecord' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.avro.test.nullable.SubRecord.Builder getNullableRecordBuilder() {
      if (nullableRecordBuilder == null) {
        if (hasNullableRecord()) {
          setNullableRecordBuilder(org.apache.avro.test.nullable.SubRecord.newBuilder(nullableRecord));
        } else {
          setNullableRecordBuilder(org.apache.avro.test.nullable.SubRecord.newBuilder());
        }
      }
      return nullableRecordBuilder;
    }

    /**
     * Sets the Builder instance for the 'nullableRecord' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.avro.test.nullable.RecordWithNullables.Builder setNullableRecordBuilder(org.apache.avro.test.nullable.SubRecord.Builder value) {
      clearNullableRecord();
      nullableRecordBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'nullableRecord' field has an active Builder instance
     * @return True if the 'nullableRecord' field has an active Builder instance
     */
    public boolean hasNullableRecordBuilder() {
      return nullableRecordBuilder != null;
    }

    /**
      * Clears the value of the 'nullableRecord' field.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder clearNullableRecord() {
      nullableRecord = null;
      nullableRecordBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableEnum' field.
      * @return The value.
      */
    public org.apache.avro.test.nullable.MyEnum getNullableEnum() {
      return nullableEnum;
    }

    /**
      * Gets the value of the 'nullableEnum' field as an Optional&lt;org.apache.avro.test.nullable.MyEnum&gt;.
      * @return The value wrapped in an Optional&lt;org.apache.avro.test.nullable.MyEnum&gt;.
      */
    public Optional<org.apache.avro.test.nullable.MyEnum> getOptionalNullableEnum() {
      return Optional.<org.apache.avro.test.nullable.MyEnum>ofNullable(nullableEnum);
    }

    /**
      * Sets the value of the 'nullableEnum' field.
      * @param value The value of 'nullableEnum'.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder setNullableEnum(org.apache.avro.test.nullable.MyEnum value) {
      validate(fields()[6], value);
      this.nullableEnum = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableEnum' field has been set.
      * @return True if the 'nullableEnum' field has been set, false otherwise.
      */
    public boolean hasNullableEnum() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'nullableEnum' field.
      * @return This builder.
      */
    public org.apache.avro.test.nullable.RecordWithNullables.Builder clearNullableEnum() {
      nullableEnum = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordWithNullables build() {
      try {
        RecordWithNullables record = new RecordWithNullables();
        record.nullableString = fieldSetFlags()[0] ? this.nullableString : (java.lang.String) defaultValue(fields()[0]);
        record.nullableLong = fieldSetFlags()[1] ? this.nullableLong : (java.lang.Long) defaultValue(fields()[1]);
        record.nullableInt = fieldSetFlags()[2] ? this.nullableInt : (java.lang.Integer) defaultValue(fields()[2]);
        record.nullableMap = fieldSetFlags()[3] ? this.nullableMap : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[3]);
        record.nullableArray = fieldSetFlags()[4] ? this.nullableArray : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        if (nullableRecordBuilder != null) {
          try {
            record.nullableRecord = this.nullableRecordBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("nullableRecord"));
            throw e;
          }
        } else {
          record.nullableRecord = fieldSetFlags()[5] ? this.nullableRecord : (org.apache.avro.test.nullable.SubRecord) defaultValue(fields()[5]);
        }
        record.nullableEnum = fieldSetFlags()[6] ? this.nullableEnum : (org.apache.avro.test.nullable.MyEnum) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordWithNullables>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordWithNullables>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordWithNullables>
    READER$ = (org.apache.avro.io.DatumReader<RecordWithNullables>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.nullableString == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.nullableString);
    }

    if (this.nullableLong == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.nullableLong);
    }

    if (this.nullableInt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.nullableInt);
    }

    if (this.nullableMap == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.nullableMap.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> e0: this.nullableMap.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.lang.String v0 = e0.getValue();
        out.writeString(v0);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.nullableArray == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.nullableArray.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.String e1: this.nullableArray) {
        actualSize1++;
        out.startItem();
        out.writeString(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.nullableRecord == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.nullableRecord.customEncode(out);
    }

    if (this.nullableEnum == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.nullableEnum.ordinal());
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.nullableString = null;
      } else {
        this.nullableString = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nullableLong = null;
      } else {
        this.nullableLong = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nullableInt = null;
      } else {
        this.nullableInt = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nullableMap = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.String,java.lang.String> m0 = this.nullableMap; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
          this.nullableMap = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.String k0 = null;
            k0 = in.readString();
            java.lang.String v0 = null;
            v0 = in.readString();
            m0.put(k0, v0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nullableArray = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.String> a1 = this.nullableArray;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("nullableArray").schema().getTypes().get(1));
          this.nullableArray = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readString();
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nullableRecord = null;
      } else {
        if (this.nullableRecord == null) {
          this.nullableRecord = new org.apache.avro.test.nullable.SubRecord();
        }
        this.nullableRecord.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nullableEnum = null;
      } else {
        this.nullableEnum = org.apache.avro.test.nullable.MyEnum.values()[in.readEnum()];
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nullableString = null;
          } else {
            this.nullableString = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nullableLong = null;
          } else {
            this.nullableLong = in.readLong();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nullableInt = null;
          } else {
            this.nullableInt = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nullableMap = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.String,java.lang.String> m0 = this.nullableMap; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
              this.nullableMap = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.String k0 = null;
                k0 = in.readString();
                java.lang.String v0 = null;
                v0 = in.readString();
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nullableArray = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.String> a1 = this.nullableArray;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("nullableArray").schema().getTypes().get(1));
              this.nullableArray = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readString();
                a1.add(e1);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nullableRecord = null;
          } else {
            if (this.nullableRecord == null) {
              this.nullableRecord = new org.apache.avro.test.nullable.SubRecord();
            }
            this.nullableRecord.customDecode(in);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nullableEnum = null;
          } else {
            this.nullableEnum = org.apache.avro.test.nullable.MyEnum.values()[in.readEnum()];
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










