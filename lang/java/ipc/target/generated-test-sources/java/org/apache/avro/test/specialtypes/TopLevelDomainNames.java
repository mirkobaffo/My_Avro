/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.test.specialtypes;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class TopLevelDomainNames extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6930016385150044848L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TopLevelDomainNames\",\"namespace\":\"org.apache.avro.test.specialtypes\",\"fields\":[{\"name\":\"org\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"avro\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"com\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"net\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"nl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TopLevelDomainNames> ENCODER =
      new BinaryMessageEncoder<TopLevelDomainNames>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TopLevelDomainNames> DECODER =
      new BinaryMessageDecoder<TopLevelDomainNames>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TopLevelDomainNames> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TopLevelDomainNames> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TopLevelDomainNames> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TopLevelDomainNames>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TopLevelDomainNames to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TopLevelDomainNames from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TopLevelDomainNames instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TopLevelDomainNames fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String org;
  private java.lang.String avro;
  private java.lang.String com;
  private java.lang.String net;
  private java.lang.String nl;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TopLevelDomainNames() {}

  /**
   * All-args constructor.
   * @param org The new value for org
   * @param avro The new value for avro
   * @param com The new value for com
   * @param net The new value for net
   * @param nl The new value for nl
   */
  public TopLevelDomainNames(java.lang.String org, java.lang.String avro, java.lang.String com, java.lang.String net, java.lang.String nl) {
    this.org = org;
    this.avro = avro;
    this.com = com;
    this.net = net;
    this.nl = nl;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return org;
    case 1: return avro;
    case 2: return com;
    case 3: return net;
    case 4: return nl;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: org = value$ != null ? value$.toString() : null; break;
    case 1: avro = value$ != null ? value$.toString() : null; break;
    case 2: com = value$ != null ? value$.toString() : null; break;
    case 3: net = value$ != null ? value$.toString() : null; break;
    case 4: nl = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'org' field.
   * @return The value of the 'org' field.
   */
  public java.lang.String getOrg() {
    return org;
  }

  /**
   * Gets the value of the 'org' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalOrg() {
    return Optional.<java.lang.String>ofNullable(org);
  }

  /**
   * Sets the value of the 'org' field.
   * @param value the value to set.
   */
  public void setOrg(java.lang.String value) {
    this.org = value;
  }

  /**
   * Gets the value of the 'avro' field.
   * @return The value of the 'avro' field.
   */
  public java.lang.String getAvro() {
    return avro;
  }

  /**
   * Gets the value of the 'avro' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalAvro() {
    return Optional.<java.lang.String>ofNullable(avro);
  }

  /**
   * Sets the value of the 'avro' field.
   * @param value the value to set.
   */
  public void setAvro(java.lang.String value) {
    this.avro = value;
  }

  /**
   * Gets the value of the 'com' field.
   * @return The value of the 'com' field.
   */
  public java.lang.String getCom() {
    return com;
  }

  /**
   * Gets the value of the 'com' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalCom() {
    return Optional.<java.lang.String>ofNullable(com);
  }

  /**
   * Sets the value of the 'com' field.
   * @param value the value to set.
   */
  public void setCom(java.lang.String value) {
    this.com = value;
  }

  /**
   * Gets the value of the 'net' field.
   * @return The value of the 'net' field.
   */
  public java.lang.String getNet() {
    return net;
  }

  /**
   * Gets the value of the 'net' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalNet() {
    return Optional.<java.lang.String>ofNullable(net);
  }

  /**
   * Sets the value of the 'net' field.
   * @param value the value to set.
   */
  public void setNet(java.lang.String value) {
    this.net = value;
  }

  /**
   * Gets the value of the 'nl' field.
   * @return The value of the 'nl' field.
   */
  public java.lang.String getNl() {
    return nl;
  }

  /**
   * Gets the value of the 'nl' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalNl() {
    return Optional.<java.lang.String>ofNullable(nl);
  }

  /**
   * Sets the value of the 'nl' field.
   * @param value the value to set.
   */
  public void setNl(java.lang.String value) {
    this.nl = value;
  }

  /**
   * Creates a new TopLevelDomainNames RecordBuilder.
   * @return A new TopLevelDomainNames RecordBuilder
   */
  public static org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder newBuilder() {
    return new org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder();
  }

  /**
   * Creates a new TopLevelDomainNames RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TopLevelDomainNames RecordBuilder
   */
  public static org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder newBuilder(org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder other) {
    if (other == null) {
      return new org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder();
    } else {
      return new org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder(other);
    }
  }

  /**
   * Creates a new TopLevelDomainNames RecordBuilder by copying an existing TopLevelDomainNames instance.
   * @param other The existing instance to copy.
   * @return A new TopLevelDomainNames RecordBuilder
   */
  public static org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder newBuilder(org.apache.avro.test.specialtypes.TopLevelDomainNames other) {
    if (other == null) {
      return new org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder();
    } else {
      return new org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder(other);
    }
  }

  /**
   * RecordBuilder for TopLevelDomainNames instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TopLevelDomainNames>
    implements org.apache.avro.data.RecordBuilder<TopLevelDomainNames> {

    private java.lang.String org;
    private java.lang.String avro;
    private java.lang.String com;
    private java.lang.String net;
    private java.lang.String nl;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.org)) {
        this.org = data().deepCopy(fields()[0].schema(), other.org);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.avro)) {
        this.avro = data().deepCopy(fields()[1].schema(), other.avro);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.com)) {
        this.com = data().deepCopy(fields()[2].schema(), other.com);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.net)) {
        this.net = data().deepCopy(fields()[3].schema(), other.net);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.nl)) {
        this.nl = data().deepCopy(fields()[4].schema(), other.nl);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TopLevelDomainNames instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.avro.test.specialtypes.TopLevelDomainNames other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.org)) {
        this.org = data().deepCopy(fields()[0].schema(), other.org);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.avro)) {
        this.avro = data().deepCopy(fields()[1].schema(), other.avro);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.com)) {
        this.com = data().deepCopy(fields()[2].schema(), other.com);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.net)) {
        this.net = data().deepCopy(fields()[3].schema(), other.net);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nl)) {
        this.nl = data().deepCopy(fields()[4].schema(), other.nl);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'org' field.
      * @return The value.
      */
    public java.lang.String getOrg() {
      return org;
    }

    /**
      * Gets the value of the 'org' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalOrg() {
      return Optional.<java.lang.String>ofNullable(org);
    }

    /**
      * Sets the value of the 'org' field.
      * @param value The value of 'org'.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder setOrg(java.lang.String value) {
      validate(fields()[0], value);
      this.org = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'org' field has been set.
      * @return True if the 'org' field has been set, false otherwise.
      */
    public boolean hasOrg() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'org' field.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder clearOrg() {
      org = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'avro' field.
      * @return The value.
      */
    public java.lang.String getAvro() {
      return avro;
    }

    /**
      * Gets the value of the 'avro' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalAvro() {
      return Optional.<java.lang.String>ofNullable(avro);
    }

    /**
      * Sets the value of the 'avro' field.
      * @param value The value of 'avro'.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder setAvro(java.lang.String value) {
      validate(fields()[1], value);
      this.avro = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'avro' field has been set.
      * @return True if the 'avro' field has been set, false otherwise.
      */
    public boolean hasAvro() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'avro' field.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder clearAvro() {
      avro = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'com' field.
      * @return The value.
      */
    public java.lang.String getCom() {
      return com;
    }

    /**
      * Gets the value of the 'com' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalCom() {
      return Optional.<java.lang.String>ofNullable(com);
    }

    /**
      * Sets the value of the 'com' field.
      * @param value The value of 'com'.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder setCom(java.lang.String value) {
      validate(fields()[2], value);
      this.com = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'com' field has been set.
      * @return True if the 'com' field has been set, false otherwise.
      */
    public boolean hasCom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'com' field.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder clearCom() {
      com = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'net' field.
      * @return The value.
      */
    public java.lang.String getNet() {
      return net;
    }

    /**
      * Gets the value of the 'net' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalNet() {
      return Optional.<java.lang.String>ofNullable(net);
    }

    /**
      * Sets the value of the 'net' field.
      * @param value The value of 'net'.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder setNet(java.lang.String value) {
      validate(fields()[3], value);
      this.net = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'net' field has been set.
      * @return True if the 'net' field has been set, false otherwise.
      */
    public boolean hasNet() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'net' field.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder clearNet() {
      net = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'nl' field.
      * @return The value.
      */
    public java.lang.String getNl() {
      return nl;
    }

    /**
      * Gets the value of the 'nl' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalNl() {
      return Optional.<java.lang.String>ofNullable(nl);
    }

    /**
      * Sets the value of the 'nl' field.
      * @param value The value of 'nl'.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder setNl(java.lang.String value) {
      validate(fields()[4], value);
      this.nl = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'nl' field has been set.
      * @return True if the 'nl' field has been set, false otherwise.
      */
    public boolean hasNl() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'nl' field.
      * @return This builder.
      */
    public org.apache.avro.test.specialtypes.TopLevelDomainNames.Builder clearNl() {
      nl = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TopLevelDomainNames build() {
      try {
        TopLevelDomainNames record = new TopLevelDomainNames();
        record.org = fieldSetFlags()[0] ? this.org : (java.lang.String) defaultValue(fields()[0]);
        record.avro = fieldSetFlags()[1] ? this.avro : (java.lang.String) defaultValue(fields()[1]);
        record.com = fieldSetFlags()[2] ? this.com : (java.lang.String) defaultValue(fields()[2]);
        record.net = fieldSetFlags()[3] ? this.net : (java.lang.String) defaultValue(fields()[3]);
        record.nl = fieldSetFlags()[4] ? this.nl : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TopLevelDomainNames>
    WRITER$ = (org.apache.avro.io.DatumWriter<TopLevelDomainNames>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TopLevelDomainNames>
    READER$ = (org.apache.avro.io.DatumReader<TopLevelDomainNames>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.org);

    out.writeString(this.avro);

    out.writeString(this.com);

    out.writeString(this.net);

    out.writeString(this.nl);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.org = in.readString();

      this.avro = in.readString();

      this.com = in.readString();

      this.net = in.readString();

      this.nl = in.readString();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.org = in.readString();
          break;

        case 1:
          this.avro = in.readString();
          break;

        case 2:
          this.com = in.readString();
          break;

        case 3:
          this.net = in.readString();
          break;

        case 4:
          this.nl = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










