/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package test;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class StringablesRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5113299912277673695L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StringablesRecord\",\"namespace\":\"test\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.math.BigDecimal\"},\"doc\":\"Each field exercises one of the java-class, key-class or element-class.\"},{\"name\":\"mapWithBigIntKeys\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\",\"java-key-class\":\"java.math.BigInteger\"}},{\"name\":\"mapWithBigDecimalElements\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.math.BigDecimal\"},\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StringablesRecord> ENCODER =
      new BinaryMessageEncoder<StringablesRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StringablesRecord> DECODER =
      new BinaryMessageDecoder<StringablesRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StringablesRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StringablesRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StringablesRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StringablesRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StringablesRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StringablesRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StringablesRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StringablesRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Each field exercises one of the java-class, key-class or element-class. */
  private java.math.BigDecimal value;
  private java.util.Map<java.math.BigInteger,java.lang.String> mapWithBigIntKeys;
  private java.util.Map<java.lang.String,java.math.BigDecimal> mapWithBigDecimalElements;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StringablesRecord() {}

  /**
   * All-args constructor.
   * @param value Each field exercises one of the java-class, key-class or element-class.
   * @param mapWithBigIntKeys The new value for mapWithBigIntKeys
   * @param mapWithBigDecimalElements The new value for mapWithBigDecimalElements
   */
  public StringablesRecord(java.math.BigDecimal value, java.util.Map<java.math.BigInteger,java.lang.String> mapWithBigIntKeys, java.util.Map<java.lang.String,java.math.BigDecimal> mapWithBigDecimalElements) {
    this.value = value;
    this.mapWithBigIntKeys = mapWithBigIntKeys;
    this.mapWithBigDecimalElements = mapWithBigDecimalElements;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return value;
    case 1: return mapWithBigIntKeys;
    case 2: return mapWithBigDecimalElements;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: value = (java.math.BigDecimal)value$; break;
    case 1: mapWithBigIntKeys = (java.util.Map<java.math.BigInteger,java.lang.String>)value$; break;
    case 2: mapWithBigDecimalElements = (java.util.Map<java.lang.String,java.math.BigDecimal>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'value' field.
   * @return Each field exercises one of the java-class, key-class or element-class.
   */
  public java.math.BigDecimal getValue() {
    return value;
  }

  /**
   * Gets the value of the 'value' field as an Optional&lt;java.math.BigDecimal&gt;.
      * Each field exercises one of the java-class, key-class or element-class.
   * @return The value wrapped in an Optional&lt;java.math.BigDecimal&gt;.
   */
  public Optional<java.math.BigDecimal> getOptionalValue() {
    return Optional.<java.math.BigDecimal>ofNullable(value);
  }

  /**
   * Sets the value of the 'value' field.
   * Each field exercises one of the java-class, key-class or element-class.
   * @param value the value to set.
   */
  public void setValue(java.math.BigDecimal value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'mapWithBigIntKeys' field.
   * @return The value of the 'mapWithBigIntKeys' field.
   */
  public java.util.Map<java.math.BigInteger,java.lang.String> getMapWithBigIntKeys() {
    return mapWithBigIntKeys;
  }

  /**
   * Gets the value of the 'mapWithBigIntKeys' field as an Optional&lt;java.util.Map<java.math.BigInteger,java.lang.String>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.Map<java.math.BigInteger,java.lang.String>&gt;.
   */
  public Optional<java.util.Map<java.math.BigInteger,java.lang.String>> getOptionalMapWithBigIntKeys() {
    return Optional.<java.util.Map<java.math.BigInteger,java.lang.String>>ofNullable(mapWithBigIntKeys);
  }

  /**
   * Sets the value of the 'mapWithBigIntKeys' field.
   * @param value the value to set.
   */
  public void setMapWithBigIntKeys(java.util.Map<java.math.BigInteger,java.lang.String> value) {
    this.mapWithBigIntKeys = value;
  }

  /**
   * Gets the value of the 'mapWithBigDecimalElements' field.
   * @return The value of the 'mapWithBigDecimalElements' field.
   */
  public java.util.Map<java.lang.String,java.math.BigDecimal> getMapWithBigDecimalElements() {
    return mapWithBigDecimalElements;
  }

  /**
   * Gets the value of the 'mapWithBigDecimalElements' field as an Optional&lt;java.util.Map<java.lang.String,java.math.BigDecimal>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.Map<java.lang.String,java.math.BigDecimal>&gt;.
   */
  public Optional<java.util.Map<java.lang.String,java.math.BigDecimal>> getOptionalMapWithBigDecimalElements() {
    return Optional.<java.util.Map<java.lang.String,java.math.BigDecimal>>ofNullable(mapWithBigDecimalElements);
  }

  /**
   * Sets the value of the 'mapWithBigDecimalElements' field.
   * @param value the value to set.
   */
  public void setMapWithBigDecimalElements(java.util.Map<java.lang.String,java.math.BigDecimal> value) {
    this.mapWithBigDecimalElements = value;
  }

  /**
   * Creates a new StringablesRecord RecordBuilder.
   * @return A new StringablesRecord RecordBuilder
   */
  public static test.StringablesRecord.Builder newBuilder() {
    return new test.StringablesRecord.Builder();
  }

  /**
   * Creates a new StringablesRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StringablesRecord RecordBuilder
   */
  public static test.StringablesRecord.Builder newBuilder(test.StringablesRecord.Builder other) {
    if (other == null) {
      return new test.StringablesRecord.Builder();
    } else {
      return new test.StringablesRecord.Builder(other);
    }
  }

  /**
   * Creates a new StringablesRecord RecordBuilder by copying an existing StringablesRecord instance.
   * @param other The existing instance to copy.
   * @return A new StringablesRecord RecordBuilder
   */
  public static test.StringablesRecord.Builder newBuilder(test.StringablesRecord other) {
    if (other == null) {
      return new test.StringablesRecord.Builder();
    } else {
      return new test.StringablesRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for StringablesRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StringablesRecord>
    implements org.apache.avro.data.RecordBuilder<StringablesRecord> {

    /** Each field exercises one of the java-class, key-class or element-class. */
    private java.math.BigDecimal value;
    private java.util.Map<java.math.BigInteger,java.lang.String> mapWithBigIntKeys;
    private java.util.Map<java.lang.String,java.math.BigDecimal> mapWithBigDecimalElements;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(test.StringablesRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mapWithBigIntKeys)) {
        this.mapWithBigIntKeys = data().deepCopy(fields()[1].schema(), other.mapWithBigIntKeys);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mapWithBigDecimalElements)) {
        this.mapWithBigDecimalElements = data().deepCopy(fields()[2].schema(), other.mapWithBigDecimalElements);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing StringablesRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(test.StringablesRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mapWithBigIntKeys)) {
        this.mapWithBigIntKeys = data().deepCopy(fields()[1].schema(), other.mapWithBigIntKeys);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mapWithBigDecimalElements)) {
        this.mapWithBigDecimalElements = data().deepCopy(fields()[2].schema(), other.mapWithBigDecimalElements);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'value' field.
      * Each field exercises one of the java-class, key-class or element-class.
      * @return The value.
      */
    public java.math.BigDecimal getValue() {
      return value;
    }

    /**
      * Gets the value of the 'value' field as an Optional&lt;java.math.BigDecimal&gt;.
      * Each field exercises one of the java-class, key-class or element-class.
      * @return The value wrapped in an Optional&lt;java.math.BigDecimal&gt;.
      */
    public Optional<java.math.BigDecimal> getOptionalValue() {
      return Optional.<java.math.BigDecimal>ofNullable(value);
    }

    /**
      * Sets the value of the 'value' field.
      * Each field exercises one of the java-class, key-class or element-class.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public test.StringablesRecord.Builder setValue(java.math.BigDecimal value) {
      validate(fields()[0], value);
      this.value = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * Each field exercises one of the java-class, key-class or element-class.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'value' field.
      * Each field exercises one of the java-class, key-class or element-class.
      * @return This builder.
      */
    public test.StringablesRecord.Builder clearValue() {
      value = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapWithBigIntKeys' field.
      * @return The value.
      */
    public java.util.Map<java.math.BigInteger,java.lang.String> getMapWithBigIntKeys() {
      return mapWithBigIntKeys;
    }

    /**
      * Gets the value of the 'mapWithBigIntKeys' field as an Optional&lt;java.util.Map<java.math.BigInteger,java.lang.String>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.Map<java.math.BigInteger,java.lang.String>&gt;.
      */
    public Optional<java.util.Map<java.math.BigInteger,java.lang.String>> getOptionalMapWithBigIntKeys() {
      return Optional.<java.util.Map<java.math.BigInteger,java.lang.String>>ofNullable(mapWithBigIntKeys);
    }

    /**
      * Sets the value of the 'mapWithBigIntKeys' field.
      * @param value The value of 'mapWithBigIntKeys'.
      * @return This builder.
      */
    public test.StringablesRecord.Builder setMapWithBigIntKeys(java.util.Map<java.math.BigInteger,java.lang.String> value) {
      validate(fields()[1], value);
      this.mapWithBigIntKeys = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mapWithBigIntKeys' field has been set.
      * @return True if the 'mapWithBigIntKeys' field has been set, false otherwise.
      */
    public boolean hasMapWithBigIntKeys() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mapWithBigIntKeys' field.
      * @return This builder.
      */
    public test.StringablesRecord.Builder clearMapWithBigIntKeys() {
      mapWithBigIntKeys = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapWithBigDecimalElements' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.math.BigDecimal> getMapWithBigDecimalElements() {
      return mapWithBigDecimalElements;
    }

    /**
      * Gets the value of the 'mapWithBigDecimalElements' field as an Optional&lt;java.util.Map<java.lang.String,java.math.BigDecimal>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.Map<java.lang.String,java.math.BigDecimal>&gt;.
      */
    public Optional<java.util.Map<java.lang.String,java.math.BigDecimal>> getOptionalMapWithBigDecimalElements() {
      return Optional.<java.util.Map<java.lang.String,java.math.BigDecimal>>ofNullable(mapWithBigDecimalElements);
    }

    /**
      * Sets the value of the 'mapWithBigDecimalElements' field.
      * @param value The value of 'mapWithBigDecimalElements'.
      * @return This builder.
      */
    public test.StringablesRecord.Builder setMapWithBigDecimalElements(java.util.Map<java.lang.String,java.math.BigDecimal> value) {
      validate(fields()[2], value);
      this.mapWithBigDecimalElements = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mapWithBigDecimalElements' field has been set.
      * @return True if the 'mapWithBigDecimalElements' field has been set, false otherwise.
      */
    public boolean hasMapWithBigDecimalElements() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mapWithBigDecimalElements' field.
      * @return This builder.
      */
    public test.StringablesRecord.Builder clearMapWithBigDecimalElements() {
      mapWithBigDecimalElements = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StringablesRecord build() {
      try {
        StringablesRecord record = new StringablesRecord();
        record.value = fieldSetFlags()[0] ? this.value : (java.math.BigDecimal) defaultValue(fields()[0]);
        record.mapWithBigIntKeys = fieldSetFlags()[1] ? this.mapWithBigIntKeys : (java.util.Map<java.math.BigInteger,java.lang.String>) defaultValue(fields()[1]);
        record.mapWithBigDecimalElements = fieldSetFlags()[2] ? this.mapWithBigDecimalElements : (java.util.Map<java.lang.String,java.math.BigDecimal>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StringablesRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<StringablesRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StringablesRecord>
    READER$ = (org.apache.avro.io.DatumReader<StringablesRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.value.toString());

    long size0 = this.mapWithBigIntKeys.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.math.BigInteger, java.lang.String> e0: this.mapWithBigIntKeys.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey().toString());
      java.lang.String v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.mapWithBigDecimalElements.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.String, java.math.BigDecimal> e1: this.mapWithBigDecimalElements.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.math.BigDecimal v1 = e1.getValue();
      out.writeString(v1.toString());
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.value = new java.math.BigDecimal(in.readString());

      long size0 = in.readMapStart();
      java.util.Map<java.math.BigInteger,java.lang.String> m0 = this.mapWithBigIntKeys; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.math.BigInteger,java.lang.String>((int)size0);
        this.mapWithBigIntKeys = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.math.BigInteger k0 = null;
          k0 = new java.math.BigInteger(in.readString());
          java.lang.String v0 = null;
          v0 = in.readString();
          m0.put(k0, v0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.String,java.math.BigDecimal> m1 = this.mapWithBigDecimalElements; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.String,java.math.BigDecimal>((int)size1);
        this.mapWithBigDecimalElements = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.String k1 = null;
          k1 = in.readString();
          java.math.BigDecimal v1 = null;
          v1 = new java.math.BigDecimal(in.readString());
          m1.put(k1, v1);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.value = new java.math.BigDecimal(in.readString());
          break;

        case 1:
          long size0 = in.readMapStart();
          java.util.Map<java.math.BigInteger,java.lang.String> m0 = this.mapWithBigIntKeys; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.math.BigInteger,java.lang.String>((int)size0);
            this.mapWithBigIntKeys = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.math.BigInteger k0 = null;
              k0 = new java.math.BigInteger(in.readString());
              java.lang.String v0 = null;
              v0 = in.readString();
              m0.put(k0, v0);
            }
          }
          break;

        case 2:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.String,java.math.BigDecimal> m1 = this.mapWithBigDecimalElements; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.String,java.math.BigDecimal>((int)size1);
            this.mapWithBigDecimalElements = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.String k1 = null;
              k1 = in.readString();
              java.math.BigDecimal v1 = null;
              v1 = new java.math.BigDecimal(in.readString());
              m1.put(k1, v1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










